import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query,
  ParseIntPipe,
  BadRequestException,
  UseGuards 
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';
import { TransaccionesService } from './transacciones.service';
import { CreateTransaccionDto, UpdateTransaccionDto, FiltroTransaccionesDto } from '@/common/dto/transaccion.dto';
import { Transaccion } from './schemas/transaccion.schema';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { GetUser } from '@/common/decorators/get-user.decorator';

@ApiTags('transacciones')
@Controller('transacciones')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class TransaccionesController {
  constructor(private readonly transaccionesService: TransaccionesService) {}

  @Post()
  @ApiOperation({ summary: 'Crear una nueva transacci√≥n' })
  @ApiResponse({ 
    status: 201, 
    description: 'Transacci√≥n creada exitosamente',
    type: Transaccion
  })
  @ApiResponse({ 
    status: 400, 
    description: 'Datos inv√°lidos' 
  })
  async create(
    @Body() createTransaccionDto: CreateTransaccionDto,
    @GetUser('userId') usuarioId: string
  ): Promise<Transaccion> {
    return await this.transaccionesService.create(createTransaccionDto, usuarioId);
  }

  @Get()
  @ApiOperation({ summary: 'Obtener todas mis transacciones con filtros y paginaci√≥n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Lista de transacciones obtenida exitosamente' 
  })
  async findAll(
    @Query() filtros: FiltroTransaccionesDto,
    @GetUser('userId') usuarioId: string
  ) {
    return await this.transaccionesService.findAll(usuarioId, filtros);
  }

  @Get('estadisticas/categorias')
  @ApiOperation({ summary: 'Obtener estad√≠sticas por categor√≠a' })
  @ApiQuery({ name: 'fondoId', required: false, description: 'ID del fondo para filtrar' })
  @ApiResponse({ 
    status: 200, 
    description: 'Estad√≠sticas por categor√≠a obtenidas exitosamente' 
  })
  async getEstadisticasPorCategoria(@Query('fondoId') fondoId?: string) {
    return await this.transaccionesService.getEstadisticasPorCategoria(fondoId);
  }

  @Get('resumen/:a√±o/:mes')
  @ApiOperation({ summary: 'Obtener resumen mensual de transacciones' })
  @ApiParam({ name: 'a√±o', description: 'A√±o para el resumen' })
  @ApiParam({ name: 'mes', description: 'Mes para el resumen (1-12)' })
  @ApiQuery({ name: 'fondoId', required: false, description: 'ID del fondo para filtrar' })
  @ApiResponse({ 
    status: 200, 
    description: 'Resumen mensual obtenido exitosamente' 
  })
  async getResumenMensual(
    @Param('a√±o', ParseIntPipe) a√±o: number,
    @Param('mes', ParseIntPipe) mes: number,
    @Query('fondoId') fondoId?: string
  ) {
    if (mes < 1 || mes > 12) {
      throw new BadRequestException('El mes debe estar entre 1 y 12');
    }

    return await this.transaccionesService.getResumenMensual(a√±o, mes, fondoId);
  }

  @Get('fondo/:fondoId')
  @ApiOperation({ summary: 'Obtener transacciones de un fondo espec√≠fico' })
  @ApiParam({ name: 'fondoId', description: 'ID del fondo' })
  @ApiResponse({ 
    status: 200, 
    description: 'Transacciones del fondo obtenidas exitosamente',
    type: [Transaccion]
  })
  async findByFondo(
    @Param('fondoId') fondoId: string,
    @Query() filtros: FiltroTransaccionesDto,
    @GetUser('userId') usuarioId: string
  ): Promise<Transaccion[]> {
    return await this.transaccionesService.findByFondo(fondoId, usuarioId, filtros);
  }

  @Get(':id')
  @ApiOperation({ summary: 'Obtener una transacci√≥n por ID' })
  @ApiParam({ name: 'id', description: 'ID de la transacci√≥n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Transacci√≥n encontrada',
    type: Transaccion
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Transacci√≥n no encontrada' 
  })
  async findOne(
    @Param('id') id: string,
    @GetUser('userId') usuarioId: string
  ): Promise<Transaccion> {
    return await this.transaccionesService.findOne(id, usuarioId);
  }

  @Patch(':id')
  @ApiOperation({ summary: 'Actualizar una transacci√≥n' })
  @ApiParam({ name: 'id', description: 'ID de la transacci√≥n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Transacci√≥n actualizada exitosamente',
    type: Transaccion
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Transacci√≥n no encontrada' 
  })
  async update(
    @Param('id') id: string, 
    @Body() updateTransaccionDto: UpdateTransaccionDto,
    @GetUser('userId') usuarioId: string
  ): Promise<Transaccion> {
    console.log('üîÑ Backend - Actualizando transacci√≥n:', { id, updateTransaccionDto, usuarioId });
    
    const resultado = await this.transaccionesService.update(id, updateTransaccionDto, usuarioId);
    console.log('‚úÖ Backend - Transacci√≥n actualizada exitosamente:', resultado);
    
    return resultado;
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Eliminar una transacci√≥n' })
  @ApiParam({ name: 'id', description: 'ID de la transacci√≥n' })
  @ApiResponse({ 
    status: 200, 
    description: 'Transacci√≥n eliminada exitosamente' 
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Transacci√≥n no encontrada' 
  })
  async remove(
    @Param('id') id: string,
    @GetUser('userId') usuarioId: string
  ): Promise<{ message: string }> {
    console.log('üóëÔ∏è Backend - Eliminando transacci√≥n:', { id, usuarioId });
    
    await this.transaccionesService.remove(id, usuarioId);
    const resultado = { message: 'Transacci√≥n eliminada exitosamente' };
    
    console.log('‚úÖ Backend - Transacci√≥n eliminada exitosamente:', resultado);
    return resultado;
  }
}
