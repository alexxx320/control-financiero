{"version":3,"file":"src_app_features_auth_register_component_ts.js","mappings":"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","sources":["./src/app/features/auth/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\r\n\r\nimport { AuthService, RegisterDto } from '../../core/services/auth.service';\r\nimport { NotificationService } from '../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatProgressSpinnerModule,\r\n    RouterModule\r\n  ],\r\n  template: `\r\n    <div class=\"register-container\">\r\n      <mat-card class=\"register-card\">\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <mat-icon>person_add</mat-icon>\r\n            Crear Cuenta\r\n          </mat-card-title>\r\n          <mat-card-subtitle>Únete a Control Financiero</mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" class=\"register-form\">\r\n            \r\n            <div class=\"form-row\">\r\n              <mat-form-field appearance=\"outline\" class=\"half-width\">\r\n                <mat-label>Nombre</mat-label>\r\n                <input matInput formControlName=\"nombre\" placeholder=\"Tu nombre\">\r\n                <mat-icon matSuffix>person</mat-icon>\r\n                <mat-error *ngIf=\"registerForm.get('nombre')?.hasError('required')\">\r\n                  El nombre es requerido\r\n                </mat-error>\r\n                <mat-error *ngIf=\"registerForm.get('nombre')?.hasError('minlength')\">\r\n                  Mínimo 2 caracteres\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" class=\"half-width\">\r\n                <mat-label>Apellido (Opcional)</mat-label>\r\n                <input matInput formControlName=\"apellido\" placeholder=\"Tu apellido\">\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput type=\"email\" formControlName=\"email\" placeholder=\"tu@email.com\">\r\n              <mat-icon matSuffix>email</mat-icon>\r\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">\r\n                El email es requerido\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">\r\n                Ingresa un email válido\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('emailTaken')\">\r\n                Este email ya está registrado\r\n              </mat-error>\r\n              <mat-hint *ngIf=\"verificandoEmail\">\r\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\r\n                Verificando disponibilidad...\r\n              </mat-hint>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Teléfono (Opcional)</mat-label>\r\n              <input matInput formControlName=\"telefono\" placeholder=\"+57 300 123 4567\">\r\n              <mat-icon matSuffix>phone</mat-icon>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Contraseña</mat-label>\r\n              <input matInput [type]=\"hidePassword ? 'password' : 'text'\" formControlName=\"password\">\r\n              <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\" type=\"button\">\r\n                <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">\r\n                La contraseña es requerida\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">\r\n                Mínimo 6 caracteres\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('password')?.hasError('pattern')\">\r\n                Debe contener al menos una letra y un número\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Confirmar Contraseña</mat-label>\r\n              <input matInput [type]=\"hideConfirmPassword ? 'password' : 'text'\" formControlName=\"confirmPassword\">\r\n              <button mat-icon-button matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\" type=\"button\">\r\n                <mat-icon>{{ hideConfirmPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"registerForm.get('confirmPassword')?.hasError('required')\">\r\n                Confirma tu contraseña\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('confirmPassword')?.hasError('passwordMismatch')\">\r\n                Las contraseñas no coinciden\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <div class=\"checkbox-section\">\r\n              <mat-checkbox formControlName=\"aceptaTerminos\">\r\n                Acepto los \r\n                <a href=\"#\" (click)=\"mostrarTerminos($event)\">términos y condiciones</a>\r\n              </mat-checkbox>\r\n              <mat-error *ngIf=\"registerForm.get('aceptaTerminos')?.hasError('required') && registerForm.get('aceptaTerminos')?.touched\">\r\n                Debes aceptar los términos y condiciones\r\n              </mat-error>\r\n            </div>\r\n\r\n            <div class=\"register-actions\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" \r\n                      [disabled]=\"registerForm.invalid || loading\" class=\"full-width\">\r\n                <mat-spinner *ngIf=\"loading\" [diameter]=\"20\"></mat-spinner>\r\n                <span *ngIf=\"!loading\">Crear Cuenta</span>\r\n                <span *ngIf=\"loading\">Creando cuenta...</span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n\r\n        <mat-card-actions>\r\n          <div class=\"login-link\">\r\n            ¿Ya tienes cuenta? \r\n            <a routerLink=\"/login\" mat-button color=\"primary\">Inicia Sesión</a>\r\n          </div>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .register-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      min-height: 100vh;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      padding: 20px;\r\n    }\r\n\r\n    .register-card {\r\n      width: 100%;\r\n      max-width: 500px;\r\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n    }\r\n\r\n    .register-card mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n    }\r\n\r\n    .register-form {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 16px;\r\n      margin-top: 16px;\r\n    }\r\n\r\n    .form-row {\r\n      display: flex;\r\n      gap: 16px;\r\n    }\r\n\r\n    .full-width {\r\n      width: 100%;\r\n    }\r\n\r\n    .half-width {\r\n      flex: 1;\r\n    }\r\n\r\n    .checkbox-section {\r\n      margin: 8px 0;\r\n    }\r\n\r\n    .checkbox-section a {\r\n      color: #1976d2;\r\n      text-decoration: none;\r\n    }\r\n\r\n    .checkbox-section a:hover {\r\n      text-decoration: underline;\r\n    }\r\n\r\n    .register-actions {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    .register-actions button {\r\n      height: 48px;\r\n      font-size: 16px;\r\n    }\r\n\r\n    .login-link {\r\n      text-align: center;\r\n      width: 100%;\r\n      padding: 16px;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n      .register-container {\r\n        padding: 16px;\r\n      }\r\n\r\n      .form-row {\r\n        flex-direction: column;\r\n      }\r\n\r\n      .half-width {\r\n        width: 100%;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n  loading = false;\r\n  verificandoEmail = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private notificationService: NotificationService,\r\n    private router: Router\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      nombre: ['', [Validators.required, Validators.minLength(2)]],\r\n      apellido: [''],\r\n      email: ['', [Validators.required, Validators.email], [this.emailValidator.bind(this)]],\r\n      telefono: [''],\r\n      password: ['', [\r\n        Validators.required, \r\n        Validators.minLength(6),\r\n        Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)/)\r\n      ]],\r\n      confirmPassword: ['', [Validators.required]],\r\n      aceptaTerminos: [false, [Validators.requiredTrue]]\r\n    }, {\r\n      validators: this.passwordMatchValidator\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Si ya está autenticado, redirigir al dashboard\r\n    if (this.authService.isAuthenticated()) {\r\n      this.router.navigate(['/dashboard']);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validador personalizado para verificar que las contraseñas coincidan\r\n   */\r\n  passwordMatchValidator(control: AbstractControl): {[key: string]: any} | null {\r\n    const password = control.get('password');\r\n    const confirmPassword = control.get('confirmPassword');\r\n    \r\n    if (password && confirmPassword && password.value !== confirmPassword.value) {\r\n      confirmPassword.setErrors({ passwordMismatch: true });\r\n      return { passwordMismatch: true };\r\n    } else {\r\n      if (confirmPassword?.hasError('passwordMismatch')) {\r\n        confirmPassword.setErrors(null);\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validador asíncrono para verificar disponibilidad del email\r\n   */\r\n  emailValidator(control: AbstractControl) {\r\n    if (!control.value || !control.value.includes('@')) {\r\n      return null;\r\n    }\r\n\r\n    this.verificandoEmail = true;\r\n    \r\n    return control.valueChanges.pipe(\r\n      debounceTime(500),\r\n      distinctUntilChanged(),\r\n      switchMap(email => this.authService.verificarEmailDisponible(email)),\r\n    ).subscribe(disponible => {\r\n      this.verificandoEmail = false;\r\n      if (!disponible) {\r\n        control.setErrors({ emailTaken: true });\r\n      }\r\n    });\r\n  }\r\n\r\n  register(): void {\r\n    if (this.registerForm.invalid || this.loading) return;\r\n\r\n    this.loading = true;\r\n    const formData = this.registerForm.value;\r\n    \r\n    const registerData: RegisterDto = {\r\n      nombre: formData.nombre,\r\n      apellido: formData.apellido || undefined,\r\n      email: formData.email,\r\n      password: formData.password,\r\n      telefono: formData.telefono || undefined\r\n    };\r\n\r\n    this.authService.register(registerData).subscribe({\r\n      next: (response) => {\r\n        this.notificationService.success(`¡Bienvenido, ${response.usuario.nombre}! Tu cuenta ha sido creada exitosamente.`);\r\n        this.router.navigate(['/dashboard']);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error en registro:', error);\r\n        let mensaje = 'Error al crear la cuenta';\r\n        \r\n        if (error.status === 400) {\r\n          mensaje = 'Los datos proporcionados no son válidos';\r\n        } else if (error.status === 409) {\r\n          mensaje = 'Este email ya está registrado';\r\n        }\r\n        \r\n        this.notificationService.error(mensaje);\r\n        this.loading = false;\r\n      },\r\n      complete: () => {\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  mostrarTerminos(event: Event): void {\r\n    event.preventDefault();\r\n    this.notificationService.info('Los términos y condiciones están en desarrollo');\r\n  }\r\n}\r\n"],"names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","MatCardModule","MatButtonModule","MatIconModule","MatFormFieldModule","MatInputModule","MatCheckboxModule","MatProgressSpinnerModule","RouterModule","debounceTime","distinctUntilChanged","switchMap","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","RegisterComponent","constructor","fb","authService","notificationService","router","hidePassword","hideConfirmPassword","loading","verificandoEmail","registerForm","group","nombre","required","minLength","apellido","email","emailValidator","bind","telefono","password","pattern","confirmPassword","aceptaTerminos","requiredTrue","validators","passwordMatchValidator","ngOnInit","isAuthenticated","navigate","control","get","value","setErrors","passwordMismatch","hasError","includes","valueChanges","pipe","verificarEmailDisponible","subscribe","disponible","emailTaken","register","invalid","formData","registerData","undefined","next","response","success","usuario","error","console","mensaje","status","complete","mostrarTerminos","event","preventDefault","info","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","NotificationService","i4","Router","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_10_listener","ɵɵtemplate","RegisterComponent_mat_error_18_Template","RegisterComponent_mat_error_19_Template","RegisterComponent_mat_error_30_Template","RegisterComponent_mat_error_31_Template","RegisterComponent_mat_error_32_Template","RegisterComponent_mat_hint_33_Template","RegisterComponent_Template_button_click_44_listener","RegisterComponent_mat_error_47_Template","RegisterComponent_mat_error_48_Template","RegisterComponent_mat_error_49_Template","RegisterComponent_Template_button_click_54_listener","RegisterComponent_mat_error_57_Template","RegisterComponent_mat_error_58_Template","RegisterComponent_Template_a_click_62_listener","$event","RegisterComponent_mat_error_64_Template","RegisterComponent_mat_spinner_67_Template","RegisterComponent_span_68_Template","RegisterComponent_span_69_Template","tmp_1_0","tmp_2_0","tmp_3_0","tmp_4_0","tmp_5_0","ɵɵtextInterpolate","tmp_9_0","tmp_10_0","tmp_11_0","tmp_14_0","tmp_15_0","tmp_16_0","touched","i5","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i6","MatCard","MatCardActions","MatCardContent","MatCardHeader","MatCardSubtitle","MatCardTitle","i7","MatAnchor","MatButton","MatIconButton","i8","MatIcon","i9","MatFormField","MatLabel","MatHint","MatError","MatSuffix","i10","MatInput","i11","MatCheckbox","i12","MatProgressSpinner","RouterLink","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}