{"version":3,"file":"src_app_features_auth_login_component_ts.js","mappings":"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","sources":["./src/app/features/auth/login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { Router, ActivatedRoute, RouterModule } from '@angular/router';\r\n\r\nimport { AuthService, LoginDto } from '../../core/services/auth.service';\r\nimport { NotificationService } from '../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatProgressSpinnerModule,\r\n    MatDividerModule,\r\n    RouterModule\r\n  ],\r\n  template: `\r\n    <div class=\"login-container\">\r\n      <mat-card class=\"login-card\">\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <mat-icon>account_balance_wallet</mat-icon>\r\n            Control Financiero\r\n          </mat-card-title>\r\n          <mat-card-subtitle>Inicia sesión para continuar</mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" class=\"login-form\">\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput type=\"email\" formControlName=\"email\" placeholder=\"tu@email.com\" autocomplete=\"email\">\r\n              <mat-icon matSuffix>email</mat-icon>\r\n              <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">\r\n                El email es requerido\r\n              </mat-error>\r\n              <mat-error *ngIf=\"loginForm.get('email')?.hasError('email')\">\r\n                Ingresa un email válido\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Contraseña</mat-label>\r\n              <input matInput [type]=\"hidePassword ? 'password' : 'text'\" \r\n                     formControlName=\"password\" autocomplete=\"current-password\">\r\n              <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\" type=\"button\">\r\n                <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">\r\n                La contraseña es requerida\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <div class=\"form-options\">\r\n              <mat-checkbox formControlName=\"recordarme\">\r\n                Recordarme\r\n              </mat-checkbox>\r\n              \r\n              <a href=\"#\" (click)=\"recuperarPassword($event)\" class=\"forgot-password\">\r\n                ¿Olvidaste tu contraseña?\r\n              </a>\r\n            </div>\r\n\r\n            <div class=\"login-actions\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" \r\n                      [disabled]=\"loginForm.invalid || loading\" class=\"full-width login-button\">\r\n                <mat-spinner *ngIf=\"loading\" [diameter]=\"20\"></mat-spinner>\r\n                <mat-icon *ngIf=\"!loading\">login</mat-icon>\r\n                <span>{{ loading ? 'Iniciando sesión...' : 'Iniciar Sesión' }}</span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n\r\n        <mat-divider></mat-divider>\r\n\r\n        <mat-card-actions>\r\n          <div class=\"register-section\">\r\n            <p>¿No tienes cuenta?</p>\r\n            <button mat-stroked-button color=\"primary\" routerLink=\"/register\" class=\"full-width\">\r\n              <mat-icon>person_add</mat-icon>\r\n              Crear Cuenta\r\n            </button>\r\n          </div>\r\n        </mat-card-actions>\r\n\r\n\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .login-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      min-height: 100vh;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      padding: 20px;\r\n    }\r\n\r\n    .login-card {\r\n      width: 100%;\r\n      max-width: 400px;\r\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n    }\r\n\r\n    .login-card mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      color: #1976d2;\r\n    }\r\n\r\n    .login-form {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 16px;\r\n      margin-top: 16px;\r\n    }\r\n\r\n    .full-width {\r\n      width: 100%;\r\n    }\r\n\r\n    .form-options {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin: 8px 0;\r\n    }\r\n\r\n    .forgot-password {\r\n      color: #1976d2;\r\n      text-decoration: none;\r\n      font-size: 0.9em;\r\n    }\r\n\r\n    .forgot-password:hover {\r\n      text-decoration: underline;\r\n    }\r\n\r\n    .login-actions {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    .login-button {\r\n      height: 48px;\r\n      font-size: 16px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      gap: 8px;\r\n    }\r\n\r\n    .register-section {\r\n      text-align: center;\r\n      width: 100%;\r\n      padding: 16px;\r\n    }\r\n\r\n    .register-section p {\r\n      margin: 0 0 12px 0;\r\n      color: rgba(0, 0, 0, 0.6);\r\n    }\r\n\r\n    .register-section button {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      gap: 8px;\r\n      height: 44px;\r\n    }\r\n\r\n\r\n\r\n    @media (max-width: 480px) {\r\n      .login-container {\r\n        padding: 16px;\r\n      }\r\n\r\n      .form-options {\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        gap: 8px;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  hidePassword = true;\r\n  loading = false;\r\n  returnUrl = '/dashboard';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private notificationService: NotificationService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]],\r\n      recordarme: [false]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Obtener la URL de retorno si existe\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\r\n    \r\n    // Si ya está autenticado, redirigir\r\n    if (this.authService.isAuthenticated()) {\r\n      this.router.navigate([this.returnUrl]);\r\n    }\r\n  }\r\n\r\n  login(): void {\r\n    if (this.loginForm.invalid || this.loading) return;\r\n\r\n    this.loading = true;\r\n    const credentials: LoginDto = {\r\n      email: this.loginForm.value.email,\r\n      password: this.loginForm.value.password\r\n    };\r\n\r\n    this.authService.login(credentials).subscribe({\r\n      next: (response) => {\r\n        const nombre = response.usuario.nombre || response.usuario.email.split('@')[0];\r\n        this.notificationService.success(`¡Bienvenido, ${nombre}!`);\r\n        \r\n        // Redirigir a la URL original o al dashboard\r\n        this.router.navigate([this.returnUrl]);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error en login:', error);\r\n        let mensaje = 'Error al iniciar sesión';\r\n        \r\n        if (error.status === 401) {\r\n          mensaje = 'Email o contraseña incorrectos';\r\n        } else if (error.status === 0) {\r\n          mensaje = 'No se pudo conectar con el servidor';\r\n        }\r\n        \r\n        this.notificationService.error(mensaje);\r\n        this.loading = false;\r\n      },\r\n      complete: () => {\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  recuperarPassword(event: Event): void {\r\n    event.preventDefault();\r\n    this.notificationService.info('Función de recuperación de contraseña en desarrollo');\r\n  }\r\n}\r\n"],"names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","MatCardModule","MatButtonModule","MatIconModule","MatFormFieldModule","MatInputModule","MatCheckboxModule","MatProgressSpinnerModule","MatDividerModule","RouterModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","LoginComponent","constructor","fb","authService","notificationService","router","route","hidePassword","loading","returnUrl","loginForm","group","email","required","password","recordarme","ngOnInit","snapshot","queryParams","isAuthenticated","navigate","login","invalid","credentials","value","subscribe","next","response","nombre","usuario","split","success","error","console","mensaje","status","complete","recuperarPassword","event","preventDefault","info","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","NotificationService","i4","Router","ActivatedRoute","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_10_listener","ɵɵtemplate","LoginComponent_mat_error_17_Template","LoginComponent_mat_error_18_Template","LoginComponent_Template_button_click_23_listener","LoginComponent_mat_error_26_Template","LoginComponent_Template_a_click_30_listener","$event","LoginComponent_mat_spinner_34_Template","LoginComponent_mat_icon_35_Template","ɵɵadvance","tmp_1_0","get","hasError","tmp_2_0","ɵɵtextInterpolate","tmp_5_0","i5","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i6","MatCard","MatCardActions","MatCardContent","MatCardHeader","MatCardSubtitle","MatCardTitle","i7","MatButton","MatIconButton","i8","MatIcon","i9","MatFormField","MatLabel","MatError","MatSuffix","i10","MatInput","i11","MatCheckbox","i12","MatProgressSpinner","i13","MatDivider","RouterLink","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}