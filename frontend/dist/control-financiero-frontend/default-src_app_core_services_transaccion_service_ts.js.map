{"version":3,"file":"default-src_app_core_services_transaccion_service_ts.js","mappings":"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","sources":["./src/app/core/services/transaccion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { \n  Transaccion, \n  CreateTransaccionDto, \n  UpdateTransaccionDto, \n  TipoTransaccion, \n  CategoriaTransaccion,\n  FiltroTransacciones,\n  ResponseTransacciones,\n  EstadisticasTransacciones,\n  CreateTransferenciaDto,\n  ResponseTransferencia\n} from '../models/transaccion.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransaccionService {\n  private apiUrl = `${environment.apiUrl}/transacciones`;\n  private transaccionesSubject = new BehaviorSubject<Transaccion[]>([]);\n  private estadisticasSubject = new BehaviorSubject<EstadisticasTransacciones | null>(null);\n  \n  public transacciones$ = this.transaccionesSubject.asObservable();\n  public estadisticas$ = this.estadisticasSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Obtener transacciones con filtros y paginación\n   */\n  obtenerTransacciones(filtros: FiltroTransacciones = {}): Observable<ResponseTransacciones> {\n    let params = new HttpParams();\n    \n    console.log('📋 Frontend - Filtros recibidos:', filtros);\n    \n    // Agregar parámetros de filtro\n    Object.keys(filtros).forEach(key => {\n      const value = (filtros as any)[key];\n      if (value !== undefined && value !== null && value !== '') {\n        if (Array.isArray(value)) {\n          value.forEach(v => params = params.append(key, v));\n        } else {\n          params = params.set(key, value.toString());\n        }\n      }\n    });\n    \n    console.log('🌐 Frontend - Parámetros HTTP enviados:', params.toString());\n    console.log('🌐 Frontend - URL completa:', `${this.apiUrl}?${params.toString()}`);\n\n    return this.http.get<any>(this.apiUrl, { params })\n      .pipe(\n        map(response => {\n          // Transformar respuesta del backend a formato esperado\n          const transaccionesTransformadas = response.transacciones?.map((t: any) => ({\n            ...t,\n            // Si fondoId es un objeto (populado), extraer solo el ID para consistency\n            fondoId: typeof t.fondoId === 'object' && t.fondoId._id ? t.fondoId._id : t.fondoId,\n            // Guardar el nombre del fondo si viene populado\n            _fondoNombre: typeof t.fondoId === 'object' && t.fondoId.nombre ? t.fondoId.nombre : null\n          })) || [];\n          \n          return {\n            transacciones: transaccionesTransformadas,\n            total: response.total || transaccionesTransformadas.length,\n            page: response.page || 1,\n            totalPages: response.totalPages || 1,\n            resumen: response.resumen\n          } as ResponseTransacciones;\n        }),\n        tap(response => {\n          console.log('✅ Transacciones del backend transformadas:', response);\n          this.transaccionesSubject.next(response.transacciones);\n          if (response.resumen) {\n            this.actualizarEstadisticas(response.resumen);\n          }\n        }),\n        catchError(error => {\n          console.error('❌ Error al obtener transacciones del backend:', error);\n          \n          // Solo usar datos simulados si es un error de conexión\n          if (error.status === 0) {\n            console.log('📊 Usando datos simulados como fallback por error de conexión...');\n            return this.generarDatosSimulados(filtros);\n          }\n          \n          // Para otros errores, devolver respuesta vacía\n          return of({\n            transacciones: [],\n            total: 0,\n            page: 1,\n            totalPages: 0\n          } as ResponseTransacciones);\n        })\n      );\n  }\n\n  /**\n   * Obtener una transacción por ID\n   */\n  obtenerTransaccionPorId(id: string): Observable<Transaccion> {\n    return this.http.get<Transaccion>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Crear nueva transacción\n   */\n  crearTransaccion(transaccion: CreateTransaccionDto): Observable<Transaccion> {\n    return this.http.post<Transaccion>(this.apiUrl, transaccion)\n      .pipe(\n        tap(nuevaTransaccion => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n        }),\n        catchError(error => {\n          console.error('Error al crear transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Crear una transferencia entre fondos\n   */\n  crearTransferencia(transferencia: CreateTransferenciaDto): Observable<ResponseTransferencia> {\n    console.log('🔄 Frontend - Creando transferencia:', transferencia);\n    console.log('🌐 Frontend - URL de transferencia:', `${this.apiUrl}/transferencia`);\n    console.log('🌐 Frontend - API Base URL:', this.apiUrl);\n    \n    return this.http.post<ResponseTransferencia>(`${this.apiUrl}/transferencia`, transferencia)\n      .pipe(\n        tap(response => {\n          console.log('✅ Frontend - Transferencia creada exitosamente:', response);\n          \n          // Agregar ambas transacciones a la lista local\n          const transaccionesActuales = this.transaccionesSubject.value;\n          this.transaccionesSubject.next([\n            response.transaccionOrigen, \n            response.transaccionDestino, \n            ...transaccionesActuales\n          ]);\n        }),\n        catchError(error => {\n          console.error('❌ Frontend - Error al crear transferencia:', error);\n          console.error('❌ Frontend - Error status:', error.status);\n          console.error('❌ Frontend - Error URL:', error.url);\n          console.error('❌ Frontend - Error message:', error.message);\n          \n          let mensaje = 'Error al crear la transferencia';\n          if (error.status === 400) {\n            mensaje = error.error?.message || 'Datos de transferencia inválidos o saldo insuficiente';\n          } else if (error.status === 404) {\n            mensaje = 'Endpoint de transferencias no encontrado - Verificar que el backend esté ejecutándose';\n          } else if (error.status === 401) {\n            mensaje = 'No autorizado para realizar transferencias';\n          } else if (error.status === 0) {\n            mensaje = 'No se puede conectar con el servidor';\n          }\n          \n          throw { ...error, message: mensaje };\n        })\n      );\n  }\n\n  /**\n   * Actualizar transacción existente\n   */\n  actualizarTransaccion(id: string, transaccion: UpdateTransaccionDto): Observable<Transaccion> {\n    console.log('🔄 Frontend - Actualizando transacción:', { id, transaccion });\n    console.log('🔄 Frontend - URL completa:', `${this.apiUrl}/${id}`);\n    \n    return this.http.patch<Transaccion>(`${this.apiUrl}/${id}`, transaccion)\n      .pipe(\n        tap(transaccionActualizada => {\n          console.log('✅ Frontend - Transacción actualizada exitosamente:', transaccionActualizada);\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const index = transaccionesActuales.findIndex(t => t._id === id);\n          if (index !== -1) {\n            transaccionesActuales[index] = transaccionActualizada;\n            this.transaccionesSubject.next([...transaccionesActuales]);\n            console.log('✅ Frontend - Lista de transacciones actualizada');\n          } else {\n            console.warn('⚠️ Frontend - No se encontró la transacción en la lista local para actualizar');\n          }\n        }),\n        catchError(error => {\n          console.error('❌ Frontend - Error al actualizar transacción:', error);\n          console.error('❌ Frontend - Error detalles:', {\n            status: error.status,\n            statusText: error.statusText,\n            message: error.message,\n            url: error.url\n          });\n          \n          let mensaje = 'Error al actualizar la transacción';\n          if (error.status === 404) {\n            mensaje = 'Transacción no encontrada';\n          } else if (error.status === 401) {\n            mensaje = 'No autorizado para editar esta transacción';\n          } else if (error.status === 400) {\n            mensaje = error.error?.message || 'Datos de la transacción inválidos';\n          } else if (error.status === 0) {\n            mensaje = 'No se puede conectar con el servidor';\n          }\n          \n          throw { ...error, message: mensaje };\n        })\n      );\n  }\n\n  /**\n   * Eliminar transacción\n   */\n  eliminarTransaccion(id: string): Observable<{message: string}> {\n    console.log('🗑️ Eliminando transacción:', id);\n    \n    return this.http.delete<{message: string}>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap((response) => {\n          console.log('✅ Transacción eliminada exitosamente:', response);\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n          this.transaccionesSubject.next(transaccionesFiltradas);\n        }),\n        catchError(error => {\n          console.error('❌ Error al eliminar transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Obtener todas las categorías disponibles\n   */\n  obtenerCategorias(): CategoriaTransaccion[] {\n    return [\n      // Categorías de gastos\n      'necesario',\n      'no_necesario',\n      // Categorías de ingresos\n      'salario',\n      'regalo',\n      'otros',\n      // Categoría para transferencias\n      'transferencia'\n    ];\n  }\n\n  /**\n   * Obtener categorías filtradas por tipo\n   */\n  obtenerCategoriasPorTipo(tipo: TipoTransaccion | 'transferencia'): CategoriaTransaccion[] {\n    const categoriasGastos: CategoriaTransaccion[] = [\n      'necesario', 'no_necesario'\n    ];\n    \n    const categoriasIngresos: CategoriaTransaccion[] = [\n      'salario', 'regalo', 'otros'\n    ];\n    \n    const categoriasTransferencias: CategoriaTransaccion[] = [\n      'transferencia'\n    ];\n    \n    if (tipo === 'gasto') return categoriasGastos;\n    if (tipo === 'ingreso') return categoriasIngresos;\n    if (tipo === 'transferencia') return categoriasTransferencias;\n    \n    return [];\n  }\n\n  /**\n   * Actualizar estadísticas internas\n   */\n  private actualizarEstadisticas(resumen: any): void {\n    const estadisticas: EstadisticasTransacciones = {\n      totalTransacciones: resumen.totalIngresos + resumen.totalGastos,\n      totalIngresos: resumen.totalIngresos,\n      totalGastos: resumen.totalGastos,\n      balance: resumen.totalIngresos - resumen.totalGastos,\n      promedioTransacciones: 0,\n      categoriaMaxGasto: { categoria: '', monto: 0 },\n      categoriaMaxIngreso: { categoria: '', monto: 0 },\n      tendenciaMensual: []\n    };\n    \n    this.estadisticasSubject.next(estadisticas);\n  }\n\n  /**\n   * Obtener transacciones de un fondo específico\n   */\n  obtenerTransaccionesPorFondo(fondoId: string, limite: number = 10): Observable<Transaccion[]> {\n    let params = new HttpParams()\n      .set('limit', limite.toString())\n      .set('ordenarPor', 'fecha')\n      .set('orden', 'desc'); // Más recientes primero\n\n    return this.http.get<Transaccion[]>(`${this.apiUrl}/fondo/${fondoId}`, { params })\n      .pipe(\n        map(transacciones => {\n          // Transformar respuesta del backend\n          return transacciones.map((t: any) => ({\n            ...t,\n            fondoId: typeof t.fondoId === 'object' && t.fondoId._id ? t.fondoId._id : t.fondoId,\n            _fondoNombre: typeof t.fondoId === 'object' && t.fondoId.nombre ? t.fondoId.nombre : null\n          }));\n        }),\n        catchError(error => {\n          console.error('❌ Error al obtener transacciones del fondo:', error);\n          \n          // Fallback con datos simulados para el fondo específico\n          if (error.status === 0) {\n            console.log('📊 Usando datos simulados para el fondo:', fondoId);\n            return this.generarDatosSimuladosPorFondo(fondoId, limite);\n          }\n          \n          return of([]);\n        })\n      );\n  }\n\n  /**\n   * Generar datos simulados para un fondo específico\n   */\n  private generarDatosSimuladosPorFondo(fondoId: string, limite: number): Observable<Transaccion[]> {\n    const transaccionesSimuladas: Transaccion[] = [\n      {\n        _id: `trans_${fondoId}_1`,\n        fondoId: fondoId,\n        descripcion: 'Compras del supermercado',\n        monto: 150000,\n        tipo: 'gasto',\n        categoria: 'necesario',\n        fecha: new Date(),\n        notas: 'Compras semanales'\n      },\n      {\n        _id: `trans_${fondoId}_2`,\n        fondoId: fondoId,\n        descripcion: 'Salario mensual',\n        monto: 500000,\n        tipo: 'ingreso',\n        categoria: 'salario',\n        fecha: new Date(Date.now() - 86400000), // Ayer\n        notas: 'Depósito inicial del fondo'\n      },\n      {\n        _id: `trans_${fondoId}_3`,\n        fondoId: fondoId,\n        descripcion: 'Entretenimiento - Cine',\n        monto: 25000,\n        tipo: 'gasto',\n        categoria: 'no_necesario',\n        fecha: new Date(Date.now() - 172800000), // Hace 2 días\n      },\n      {\n        _id: `trans_${fondoId}_4`,\n        fondoId: fondoId,\n        descripcion: 'Regalo de cumpleaños',\n        monto: 200000,\n        tipo: 'ingreso',\n        categoria: 'regalo',\n        fecha: new Date(Date.now() - 259200000), // Hace 3 días\n      },\n      {\n        _id: `trans_${fondoId}_5`,\n        fondoId: fondoId,\n        descripcion: 'Venta de artículos',\n        monto: 35000,\n        tipo: 'ingreso',\n        categoria: 'otros',\n        fecha: new Date(Date.now() - 345600000), // Hace 4 días\n      }\n    ];\n\n    return of(transaccionesSimuladas.slice(0, limite));\n  }\n  private generarDatosSimulados(filtros: FiltroTransacciones): Observable<ResponseTransacciones> {\n    console.log('📊 Generando datos simulados de transacciones...');\n    console.log('📊 Filtros aplicados a datos simulados:', filtros);\n    \n    // Obtener fondos del cache para usar IDs reales\n    let fondosReales: any[] = [];\n    try {\n      const cache = localStorage.getItem('fondos_cache');\n      if (cache) {\n        fondosReales = JSON.parse(cache);\n        console.log('📦 Fondos desde cache:', fondosReales);\n      }\n    } catch (e) {\n      console.warn('Error leyendo cache de fondos');\n    }\n    \n    // Si no hay fondos en cache, usar IDs que coincidan con los que viste\n    const fondoId1 = fondosReales[0]?._id || '685393a3a9540bbd42b8aa7a';\n    const fondoId2 = fondosReales[1]?._id || '685393a3a9540bbd42b8aa7b';\n    const fondoId3 = fondosReales[2]?._id || '685393a3a9540bbd42b8aa7c';\n    \n    console.log('🏦 Usando fondoIds:', { fondoId1, fondoId2, fondoId3 });\n    \n    const transaccionesSimuladas: Transaccion[] = [\n      {\n        _id: 'trans_1',\n        fondoId: fondoId1,\n        descripcion: 'Compras del supermercado',\n        monto: 150000,\n        tipo: 'gasto',\n        categoria: 'necesario',\n        fecha: new Date(),\n        notas: 'Compras semanales',\n        etiquetas: ['supermercado', 'semanal']\n      },\n      {\n        _id: 'trans_2',\n        fondoId: fondoId2, // Diferente fondo\n        descripcion: 'Salario mensual',\n        monto: 2500000,\n        tipo: 'ingreso',\n        categoria: 'salario',\n        fecha: new Date(),\n        etiquetas: ['trabajo', 'mensual']\n      },\n      {\n        _id: 'trans_3',\n        fondoId: fondoId1,\n        descripcion: 'Videojuegos',\n        monto: 45000,\n        tipo: 'gasto',\n        categoria: 'no_necesario',\n        fecha: new Date(),\n        notas: 'Entretenimiento'\n      },\n      {\n        _id: 'trans_4',\n        fondoId: fondoId3, // Tercer fondo\n        descripcion: 'Regalo familiar',\n        monto: 800000,\n        tipo: 'ingreso',\n        categoria: 'regalo',\n        fecha: new Date(),\n        etiquetas: ['familia', 'especial']\n      },\n      {\n        _id: 'trans_5',\n        fondoId: fondoId2, // Segundo fondo\n        descripcion: 'Venta de productos',\n        monto: 85000,\n        tipo: 'ingreso',\n        categoria: 'otros',\n        fecha: new Date()\n      },\n      {\n        _id: 'trans_6',\n        fondoId: fondoId3,\n        descripcion: 'Medicamentos',\n        monto: 75000,\n        tipo: 'gasto',\n        categoria: 'necesario',\n        fecha: new Date(Date.now() - 86400000)\n      }\n    ];\n\n    console.log('📊 Transacciones antes de filtros:', transaccionesSimuladas.map(t => ({ desc: t.descripcion, fondoId: t.fondoId })));\n\n    // Aplicar filtros\n    let transaccionesFiltradas = transaccionesSimuladas;\n    \n    if (filtros.tipo) {\n      console.log('🔄 Aplicando filtro tipo:', filtros.tipo);\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.tipo === filtros.tipo);\n    }\n    \n    if (filtros.categoria) {\n      console.log('🔄 Aplicando filtro categoría:', filtros.categoria);\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.categoria === filtros.categoria);\n    }\n    \n    if (filtros.fondoId) {\n      console.log('🔄 Aplicando filtro fondo:', filtros.fondoId);\n      console.log('🔄 Transacciones antes del filtro de fondo:', transaccionesFiltradas.map(t => ({ desc: t.descripcion, fondoId: t.fondoId })));\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.fondoId === filtros.fondoId);\n      console.log('🔄 Transacciones después del filtro de fondo:', transaccionesFiltradas.map(t => ({ desc: t.descripcion, fondoId: t.fondoId })));\n    }\n\n    const responseSimulada: ResponseTransacciones = {\n      transacciones: transaccionesFiltradas,\n      total: transaccionesFiltradas.length,\n      page: filtros.page || 1,\n      totalPages: Math.ceil(transaccionesFiltradas.length / (filtros.limit || 10)),\n      resumen: {\n        totalIngresos: transaccionesFiltradas\n          .filter(t => t.tipo === 'ingreso')\n          .reduce((sum, t) => sum + t.monto, 0),\n        totalGastos: transaccionesFiltradas\n          .filter(t => t.tipo === 'gasto')\n          .reduce((sum, t) => sum + t.monto, 0),\n        balance: 0,\n        transaccionesPorCategoria: []\n      }\n    };\n\n    responseSimulada.resumen!.balance = \n      responseSimulada.resumen!.totalIngresos - responseSimulada.resumen!.totalGastos;\n\n    console.log('✅ Transacciones simuladas generadas:', responseSimulada);\n    console.log('🏦 FondoIds en respuesta final:', transaccionesFiltradas.map(t => t.fondoId));\n    \n    this.transaccionesSubject.next(responseSimulada.transacciones);\n    return of(responseSimulada);\n  }\n}\n"],"names":["HttpParams","BehaviorSubject","of","tap","catchError","map","environment","TransaccionService","constructor","http","apiUrl","transaccionesSubject","estadisticasSubject","transacciones$","asObservable","estadisticas$","obtenerTransacciones","filtros","params","console","log","Object","keys","forEach","key","value","undefined","Array","isArray","v","append","set","toString","get","pipe","response","transaccionesTransformadas","transacciones","t","fondoId","_id","_fondoNombre","nombre","total","length","page","totalPages","resumen","next","actualizarEstadisticas","error","status","generarDatosSimulados","obtenerTransaccionPorId","id","crearTransaccion","transaccion","post","nuevaTransaccion","transaccionesActuales","crearTransferencia","transferencia","transaccionOrigen","transaccionDestino","url","message","mensaje","actualizarTransaccion","patch","transaccionActualizada","index","findIndex","warn","statusText","eliminarTransaccion","delete","transaccionesFiltradas","filter","obtenerCategorias","obtenerCategoriasPorTipo","tipo","categoriasGastos","categoriasIngresos","categoriasTransferencias","estadisticas","totalTransacciones","totalIngresos","totalGastos","balance","promedioTransacciones","categoriaMaxGasto","categoria","monto","categoriaMaxIngreso","tendenciaMensual","obtenerTransaccionesPorFondo","limite","generarDatosSimuladosPorFondo","transaccionesSimuladas","descripcion","fecha","Date","notas","now","slice","fondosReales","cache","localStorage","getItem","JSON","parse","e","fondoId1","fondoId2","fondoId3","etiquetas","desc","responseSimulada","Math","ceil","limit","reduce","sum","transaccionesPorCategoria","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}