{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    // Solo agregar el token a las peticiones a nuestra API\n    if (token && req.url.includes(environment.apiUrl)) {\n      const authReq = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(authReq);\n    }\n    return next.handle(req);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["environment","AuthInterceptor","constructor","authService","intercept","req","next","token","getToken","url","includes","apiUrl","authReq","clone","headers","set","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  \n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    \n    // Solo agregar el token a las peticiones a nuestra API\n    if (token && req.url.includes(environment.apiUrl)) {\n      const authReq = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(authReq);\n    }\n    \n    return next.handle(req);\n  }\n}\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,mCAAmC;;;AAG/D,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,IAAIF,GAAG,CAACI,GAAG,CAACC,QAAQ,CAACV,WAAW,CAACW,MAAM,CAAC,EAAE;MACjD,MAAMC,OAAO,GAAGP,GAAG,CAACQ,KAAK,CAAC;QACxBC,OAAO,EAAET,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUR,KAAK,EAAE;OAC5D,CAAC;MACF,OAAOD,IAAI,CAACU,MAAM,CAACJ,OAAO,CAAC;;IAG7B,OAAON,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC;EACzB;;;uBAhBWJ,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAfnB,eAAe;MAAAoB,OAAA,EAAfpB,eAAe,CAAAqB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}