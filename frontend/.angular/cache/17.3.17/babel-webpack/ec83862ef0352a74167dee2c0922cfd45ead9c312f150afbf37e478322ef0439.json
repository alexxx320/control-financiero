{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/notification.service\";\nexport class ErrorInterceptor {\n  constructor(router, notificationService) {\n    this.router = router;\n    this.notificationService = notificationService;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(error => {\n      console.error('Error HTTP interceptado:', error);\n      let errorMessage = 'Ha ocurrido un error';\n      if (error.error instanceof ErrorEvent) {\n        // Error del cliente\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Error del servidor\n        switch (error.status) {\n          case 0:\n            errorMessage = 'No se puede conectar con el servidor. Verifica que el backend esté ejecutándose.';\n            break;\n          case 401:\n            errorMessage = 'No autorizado. Por favor inicia sesión nuevamente.';\n            // Redirigir al login\n            this.router.navigate(['/login']);\n            break;\n          case 403:\n            errorMessage = 'No tienes permisos para realizar esta acción.';\n            break;\n          case 404:\n            errorMessage = 'Recurso no encontrado.';\n            break;\n          case 500:\n            errorMessage = 'Error interno del servidor.';\n            break;\n          default:\n            errorMessage = error.error?.message || `Error ${error.status}: ${error.statusText}`;\n        }\n      }\n      // Mostrar notificación\n      this.notificationService.showError(errorMessage);\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","constructor","router","notificationService","intercept","req","next","handle","pipe","error","console","errorMessage","ErrorEvent","message","status","navigate","statusText","showError","i0","ɵɵinject","i1","Router","i2","NotificationService","factory","ɵfac"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  \n  constructor(\n    private router: Router,\n    private notificationService: NotificationService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.error('Error HTTP interceptado:', error);\n        \n        let errorMessage = 'Ha ocurrido un error';\n        \n        if (error.error instanceof ErrorEvent) {\n          // Error del cliente\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // Error del servidor\n          switch (error.status) {\n            case 0:\n              errorMessage = 'No se puede conectar con el servidor. Verifica que el backend esté ejecutándose.';\n              break;\n            case 401:\n              errorMessage = 'No autorizado. Por favor inicia sesión nuevamente.';\n              // Redirigir al login\n              this.router.navigate(['/login']);\n              break;\n            case 403:\n              errorMessage = 'No tienes permisos para realizar esta acción.';\n              break;\n            case 404:\n              errorMessage = 'Recurso no encontrado.';\n              break;\n            case 500:\n              errorMessage = 'Error interno del servidor.';\n              break;\n            default:\n              errorMessage = error.error?.message || `Error ${error.status}: ${error.statusText}`;\n          }\n        }\n        \n        // Mostrar notificación\n        this.notificationService.showError(errorMessage);\n        \n        return throwError(() => error);\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,OAAM,MAAOC,gBAAgB;EAE3BC,YACUC,MAAc,EACdC,mBAAwC;IADxC,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;EAC1B;EAEHC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC1BT,UAAU,CAAEU,KAAwB,IAAI;MACtCC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAEhD,IAAIE,YAAY,GAAG,sBAAsB;MAEzC,IAAIF,KAAK,CAACA,KAAK,YAAYG,UAAU,EAAE;QACrC;QACAD,YAAY,GAAG,UAAUF,KAAK,CAACA,KAAK,CAACI,OAAO,EAAE;OAC/C,MAAM;QACL;QACA,QAAQJ,KAAK,CAACK,MAAM;UAClB,KAAK,CAAC;YACJH,YAAY,GAAG,kFAAkF;YACjG;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,oDAAoD;YACnE;YACA,IAAI,CAACT,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YAChC;UACF,KAAK,GAAG;YACNJ,YAAY,GAAG,+CAA+C;YAC9D;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,wBAAwB;YACvC;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,6BAA6B;YAC5C;UACF;YACEA,YAAY,GAAGF,KAAK,CAACA,KAAK,EAAEI,OAAO,IAAI,SAASJ,KAAK,CAACK,MAAM,KAAKL,KAAK,CAACO,UAAU,EAAE;;;MAIzF;MACA,IAAI,CAACb,mBAAmB,CAACc,SAAS,CAACN,YAAY,CAAC;MAEhD,OAAOb,UAAU,CAAC,MAAMW,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBAhDWT,gBAAgB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAhBvB,gBAAgB;MAAAwB,OAAA,EAAhBxB,gBAAgB,CAAAyB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}