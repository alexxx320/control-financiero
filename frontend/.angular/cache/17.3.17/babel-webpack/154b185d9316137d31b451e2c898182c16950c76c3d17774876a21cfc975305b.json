{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DashboardService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}`;\n  }\n  obtenerResumenFinanciero(fechaInicio, fechaFin) {\n    let params = new HttpParams();\n    if (fechaInicio) params = params.set('fechaInicio', fechaInicio);\n    if (fechaFin) params = params.set('fechaFin', fechaFin);\n    return this.http.get(`${this.apiUrl}/reportes/resumen`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error al obtener resumen financiero:', error);\n      // Datos simulados para desarrollo\n      const resumenSimulado = {\n        totalIngresos: 2500000,\n        totalGastos: 1800000,\n        balance: 700000,\n        fondosPorTipo: [{\n          tipo: 'ahorro',\n          cantidad: 2,\n          montoTotal: 1200000,\n          progreso: 75\n        }, {\n          tipo: 'emergencia',\n          cantidad: 1,\n          montoTotal: 800000,\n          progreso: 90\n        }, {\n          tipo: 'personal',\n          cantidad: 1,\n          montoTotal: 500000,\n          progreso: 50\n        }],\n        transaccionesPorCategoria: [{\n          categoria: 'alimentacion',\n          tipo: 'gasto',\n          monto: 600000,\n          cantidad: 12,\n          porcentaje: 33.3\n        }, {\n          categoria: 'transporte',\n          tipo: 'gasto',\n          monto: 400000,\n          cantidad: 8,\n          porcentaje: 22.2\n        }, {\n          categoria: 'salario',\n          tipo: 'ingreso',\n          monto: 2500000,\n          cantidad: 1,\n          porcentaje: 100\n        }],\n        tendenciaMensual: [{\n          mes: 'Enero',\n          ingresos: 2200000,\n          gastos: 1600000,\n          balance: 600000\n        }, {\n          mes: 'Febrero',\n          ingresos: 2300000,\n          gastos: 1700000,\n          balance: 600000\n        }, {\n          mes: 'Marzo',\n          ingresos: 2500000,\n          gastos: 1800000,\n          balance: 700000\n        }]\n      };\n      return [resumenSimulado];\n    }));\n  }\n  obtenerEstadisticas() {\n    return this.http.get(`${this.apiUrl}/fondos/estadisticas`).pipe(catchError(error => {\n      console.error('Error al obtener estadísticas:', error);\n      // Datos simulados para desarrollo\n      const estadisticasSimuladas = {\n        totalFondos: 5,\n        fondosActivos: 3,\n        transaccionesHoy: 2,\n        transaccionesMes: 24,\n        mayorGasto: 150000,\n        mayorIngreso: 2500000\n      };\n      return [estadisticasSimuladas];\n    }));\n  }\n  obtenerDatosGrafico(tipo, periodo = 'mes') {\n    const params = new HttpParams().set('periodo', periodo);\n    return this.http.get(`${this.apiUrl}/reportes/grafico/${tipo}`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error al obtener datos de gráfico:', error);\n      // Retornar datos simulados según el tipo\n      let datosSimulados;\n      switch (tipo) {\n        case 'ingresos-gastos':\n          datosSimulados = {\n            labels: ['Ingresos', 'Gastos'],\n            datasets: [{\n              data: [2500000, 1800000],\n              backgroundColor: ['#4caf50', '#f44336']\n            }]\n          };\n          break;\n        case 'categorias':\n          datosSimulados = {\n            labels: ['Alimentación', 'Transporte', 'Entretenimiento', 'Servicios'],\n            datasets: [{\n              data: [600000, 400000, 300000, 250000],\n              backgroundColor: ['#2196f3', '#ff9800', '#9c27b0', '#607d8b']\n            }]\n          };\n          break;\n        case 'tendencia':\n          datosSimulados = {\n            labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo'],\n            datasets: [{\n              label: 'Ingresos',\n              data: [2200000, 2300000, 2500000, 2400000, 2600000],\n              borderColor: '#4caf50',\n              backgroundColor: 'rgba(76, 175, 80, 0.1)'\n            }, {\n              label: 'Gastos',\n              data: [1600000, 1700000, 1800000, 1750000, 1900000],\n              borderColor: '#f44336',\n              backgroundColor: 'rgba(244, 67, 54, 0.1)'\n            }]\n          };\n          break;\n        default:\n          datosSimulados = {\n            labels: [],\n            datasets: []\n          };\n      }\n      return [datosSimulados];\n    }));\n  }\n  static {\n    this.ɵfac = function DashboardService_Factory(t) {\n      return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashboardService,\n      factory: DashboardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","catchError","environment","DashboardService","constructor","http","apiUrl","obtenerResumenFinanciero","fechaInicio","fechaFin","params","set","get","pipe","error","console","resumenSimulado","totalIngresos","totalGastos","balance","fondosPorTipo","tipo","cantidad","montoTotal","progreso","transaccionesPorCategoria","categoria","monto","porcentaje","tendenciaMensual","mes","ingresos","gastos","obtenerEstadisticas","estadisticasSimuladas","totalFondos","fondosActivos","transaccionesHoy","transaccionesMes","mayorGasto","mayorIngreso","obtenerDatosGrafico","periodo","datosSimulados","labels","datasets","data","backgroundColor","label","borderColor","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\dashboard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { ResumenFinanciero, EstadisticasDashboard } from '../models/dashboard.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n  private apiUrl = `${environment.apiUrl}`;\n\n  constructor(private http: HttpClient) {}\n\n  obtenerResumenFinanciero(\n    fechaInicio?: string,\n    fechaFin?: string\n  ): Observable<ResumenFinanciero> {\n    let params = new HttpParams();\n    \n    if (fechaInicio) params = params.set('fechaInicio', fechaInicio);\n    if (fechaFin) params = params.set('fechaFin', fechaFin);\n    \n    return this.http.get<ResumenFinanciero>(`${this.apiUrl}/reportes/resumen`, { params })\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener resumen financiero:', error);\n          // Datos simulados para desarrollo\n          const resumenSimulado: ResumenFinanciero = {\n            totalIngresos: 2500000,\n            totalGastos: 1800000,\n            balance: 700000,\n            fondosPorTipo: [\n              { tipo: 'ahorro', cantidad: 2, montoTotal: 1200000, progreso: 75 },\n              { tipo: 'emergencia', cantidad: 1, montoTotal: 800000, progreso: 90 },\n              { tipo: 'personal', cantidad: 1, montoTotal: 500000, progreso: 50 }\n            ],\n            transaccionesPorCategoria: [\n              { categoria: 'alimentacion', tipo: 'gasto', monto: 600000, cantidad: 12, porcentaje: 33.3 },\n              { categoria: 'transporte', tipo: 'gasto', monto: 400000, cantidad: 8, porcentaje: 22.2 },\n              { categoria: 'salario', tipo: 'ingreso', monto: 2500000, cantidad: 1, porcentaje: 100 }\n            ],\n            tendenciaMensual: [\n              { mes: 'Enero', ingresos: 2200000, gastos: 1600000, balance: 600000 },\n              { mes: 'Febrero', ingresos: 2300000, gastos: 1700000, balance: 600000 },\n              { mes: 'Marzo', ingresos: 2500000, gastos: 1800000, balance: 700000 }\n            ]\n          };\n          return [resumenSimulado];\n        })\n      );\n  }\n\n  obtenerEstadisticas(): Observable<EstadisticasDashboard> {\n    return this.http.get<EstadisticasDashboard>(`${this.apiUrl}/fondos/estadisticas`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener estadísticas:', error);\n          // Datos simulados para desarrollo\n          const estadisticasSimuladas: EstadisticasDashboard = {\n            totalFondos: 5,\n            fondosActivos: 3,\n            transaccionesHoy: 2,\n            transaccionesMes: 24,\n            mayorGasto: 150000,\n            mayorIngreso: 2500000\n          };\n          return [estadisticasSimuladas];\n        })\n      );\n  }\n\n  obtenerDatosGrafico(\n    tipo: 'ingresos-gastos' | 'categorias' | 'fondos' | 'tendencia',\n    periodo: 'semana' | 'mes' | 'trimestre' | 'año' = 'mes'\n  ): Observable<any> {\n    const params = new HttpParams().set('periodo', periodo);\n    \n    return this.http.get(`${this.apiUrl}/reportes/grafico/${tipo}`, { params })\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener datos de gráfico:', error);\n          // Retornar datos simulados según el tipo\n          let datosSimulados: any;\n          \n          switch (tipo) {\n            case 'ingresos-gastos':\n              datosSimulados = {\n                labels: ['Ingresos', 'Gastos'],\n                datasets: [{\n                  data: [2500000, 1800000],\n                  backgroundColor: ['#4caf50', '#f44336']\n                }]\n              };\n              break;\n            case 'categorias':\n              datosSimulados = {\n                labels: ['Alimentación', 'Transporte', 'Entretenimiento', 'Servicios'],\n                datasets: [{\n                  data: [600000, 400000, 300000, 250000],\n                  backgroundColor: ['#2196f3', '#ff9800', '#9c27b0', '#607d8b']\n                }]\n              };\n              break;\n            case 'tendencia':\n              datosSimulados = {\n                labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo'],\n                datasets: [\n                  {\n                    label: 'Ingresos',\n                    data: [2200000, 2300000, 2500000, 2400000, 2600000],\n                    borderColor: '#4caf50',\n                    backgroundColor: 'rgba(76, 175, 80, 0.1)'\n                  },\n                  {\n                    label: 'Gastos',\n                    data: [1600000, 1700000, 1800000, 1750000, 1900000],\n                    borderColor: '#f44336',\n                    backgroundColor: 'rgba(244, 67, 54, 0.1)'\n                  }\n                ]\n              };\n              break;\n            default:\n              datosSimulados = { labels: [], datasets: [] };\n          }\n          \n          return [datosSimulados];\n        })\n      );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}