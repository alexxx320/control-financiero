{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/notification.service\";\nexport class AuthInterceptor {\n  constructor(authService, router, notificationService) {\n    this.authService = authService;\n    this.router = router;\n    this.notificationService = notificationService;\n  }\n  intercept(req, next) {\n    let authReq = req;\n    // Solo agregar el token a las peticiones a nuestra API\n    if (req.url.includes(environment.apiUrl)) {\n      const token = this.authService.getToken();\n      if (token) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    }\n    return next.handle(authReq).pipe(catchError(error => {\n      // Manejar errores de autenticación\n      if (error.status === 401) {\n        this.handleUnauthorized();\n      } else if (error.status === 403) {\n        this.notificationService.error('No tienes permisos para realizar esta acción');\n      } else if (error.status === 0) {\n        // Error de conexión\n        this.notificationService.warning('No se pudo conectar con el servidor. Usando datos locales.');\n      } else if (error.status >= 500) {\n        this.notificationService.error('Error del servidor. Intenta nuevamente.');\n      }\n      return throwError(() => error);\n    }));\n  }\n  handleUnauthorized() {\n    // Limpiar sesión y redirigir a login\n    this.authService.logout();\n    this.router.navigate(['/login']);\n    this.notificationService.warning('Tu sesión ha expirado. Inicia sesión nuevamente.');\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","environment","AuthInterceptor","constructor","authService","router","notificationService","intercept","req","next","authReq","url","includes","apiUrl","token","getToken","clone","setHeaders","Authorization","handle","pipe","error","status","handleUnauthorized","warning","logout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","i3","NotificationService","factory","ɵfac"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { NotificationService } from '../services/notification.service';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  \n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private notificationService: NotificationService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = req;\n    \n    // Solo agregar el token a las peticiones a nuestra API\n    if (req.url.includes(environment.apiUrl)) {\n      const token = this.authService.getToken();\n      \n      if (token) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    }\n    \n    return next.handle(authReq).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Manejar errores de autenticación\n        if (error.status === 401) {\n          this.handleUnauthorized();\n        } else if (error.status === 403) {\n          this.notificationService.error('No tienes permisos para realizar esta acción');\n        } else if (error.status === 0) {\n          // Error de conexión\n          this.notificationService.warning('No se pudo conectar con el servidor. Usando datos locales.');\n        } else if (error.status >= 500) {\n          this.notificationService.error('Error del servidor. Intenta nuevamente.');\n        }\n        \n        return throwError(() => error);\n      })\n    );\n  }\n\n  private handleUnauthorized(): void {\n    // Limpiar sesión y redirigir a login\n    this.authService.logout();\n    this.router.navigate(['/login']);\n    this.notificationService.warning('Tu sesión ha expirado. Inicia sesión nuevamente.');\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAI3C,SAASC,WAAW,QAAQ,mCAAmC;;;;;AAG/D,OAAM,MAAOC,eAAe;EAE1BC,YACUC,WAAwB,EACxBC,MAAc,EACdC,mBAAwC;IAFxC,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;EAC1B;EAEHC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,OAAO,GAAGF,GAAG;IAEjB;IACA,IAAIA,GAAG,CAACG,GAAG,CAACC,QAAQ,CAACX,WAAW,CAACY,MAAM,CAAC,EAAE;MACxC,MAAMC,KAAK,GAAG,IAAI,CAACV,WAAW,CAACW,QAAQ,EAAE;MAEzC,IAAID,KAAK,EAAE;QACTJ,OAAO,GAAGF,GAAG,CAACQ,KAAK,CAAC;UAClBC,UAAU,EAAE;YACVC,aAAa,EAAE,UAAUJ,KAAK;;SAEjC,CAAC;;;IAIN,OAAOL,IAAI,CAACU,MAAM,CAACT,OAAO,CAAC,CAACU,IAAI,CAC9BpB,UAAU,CAAEqB,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACC,kBAAkB,EAAE;OAC1B,MAAM,IAAIF,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAC/B,IAAI,CAAChB,mBAAmB,CAACe,KAAK,CAAC,8CAA8C,CAAC;OAC/E,MAAM,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QAC7B;QACA,IAAI,CAAChB,mBAAmB,CAACkB,OAAO,CAAC,4DAA4D,CAAC;OAC/F,MAAM,IAAIH,KAAK,CAACC,MAAM,IAAI,GAAG,EAAE;QAC9B,IAAI,CAAChB,mBAAmB,CAACe,KAAK,CAAC,yCAAyC,CAAC;;MAG3E,OAAOtB,UAAU,CAAC,MAAMsB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEQE,kBAAkBA,CAAA;IACxB;IACA,IAAI,CAACnB,WAAW,CAACqB,MAAM,EAAE;IACzB,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,IAAI,CAACpB,mBAAmB,CAACkB,OAAO,CAAC,kDAAkD,CAAC;EACtF;;;uBAhDWtB,eAAe,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAfhC,eAAe;MAAAiC,OAAA,EAAfjC,eAAe,CAAAkC;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}