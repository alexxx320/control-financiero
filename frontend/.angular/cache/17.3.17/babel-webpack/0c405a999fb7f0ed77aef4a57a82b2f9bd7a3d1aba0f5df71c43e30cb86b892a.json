{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    // Verificar si hay token guardado al iniciar\n    const token = this.getToken();\n    const user = this.getStoredUser();\n    if (token && user) {\n      this.isLoggedInSubject.next(true);\n      this.currentUserSubject.next(user);\n    }\n  }\n  login(credentials) {\n    console.log('Intentando login con:', credentials.email);\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      console.log('Login exitoso:', response);\n      this.handleAuthSuccess(response);\n    }), catchError(error => {\n      console.error('Error en login:', error);\n      return this.handleAuthError(error);\n    }));\n  }\n  register(userData) {\n    console.log('Intentando registro con:', userData.email);\n    // Nota: el backend espera 'registro' no 'register'\n    return this.http.post(`${this.apiUrl}/registro`, userData).pipe(tap(response => {\n      console.log('Registro exitoso:', response);\n      this.handleAuthSuccess(response);\n    }), catchError(error => {\n      console.error('Error en registro:', error);\n      return this.handleAuthError(error);\n    }));\n  }\n  handleAuthSuccess(response) {\n    // Guardar token\n    this.setToken(response.access_token);\n    // Normalizar la respuesta (el backend puede enviar 'usuario' o 'user')\n    const user = response.usuario || response.user;\n    if (user) {\n      // Guardar usuario\n      this.setStoredUser(user);\n      this.currentUserSubject.next(user);\n      this.isLoggedInSubject.next(true);\n    }\n  }\n  handleAuthError(error) {\n    let errorMessage = 'Error de autenticación';\n    if (error.status === 0) {\n      errorMessage = 'No se puede conectar con el servidor. Verifica que el backend esté ejecutándose.';\n    } else if (error.status === 400) {\n      errorMessage = error.error?.message || 'Datos inválidos';\n    } else if (error.status === 401) {\n      errorMessage = 'Credenciales inválidas';\n    } else if (error.error?.message) {\n      errorMessage = error.error.message;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getStoredUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  setStoredUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // Método para verificar la salud del backend\n  checkBackendHealth() {\n    return this.http.get(`${environment.apiUrl.replace('/api', '')}/api/health`).pipe(catchError(error => {\n      console.error('Backend no disponible:', error);\n      return throwError(() => new Error('Backend no disponible'));\n    }));\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","tap","catchError","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","isLoggedInSubject","isLoggedIn$","token","getToken","user","getStoredUser","next","login","credentials","console","log","email","post","pipe","response","handleAuthSuccess","error","handleAuthError","register","userData","setToken","access_token","usuario","setStoredUser","errorMessage","status","message","Error","logout","localStorage","removeItem","getItem","setItem","userStr","JSON","parse","stringify","isAuthenticated","getCurrentUser","value","checkBackendHealth","get","replace","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterDto {\n  nombre: string;\n  apellido: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  usuario: {\n    id: string;\n    nombre: string;\n    email: string;\n    apellido?: string;\n    rol?: string;\n  };\n  expires_in?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<any>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Verificar si hay token guardado al iniciar\n    const token = this.getToken();\n    const user = this.getStoredUser();\n    \n    if (token && user) {\n      this.isLoggedInSubject.next(true);\n      this.currentUserSubject.next(user);\n    }\n  }\n\n  login(credentials: LoginDto): Observable<AuthResponse> {\n    console.log('Intentando login con:', credentials.email);\n    \n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          console.log('Login exitoso:', response);\n          this.handleAuthSuccess(response);\n        }),\n        catchError(error => {\n          console.error('Error en login:', error);\n          return this.handleAuthError(error);\n        })\n      );\n  }\n\n  register(userData: RegisterDto): Observable<AuthResponse> {\n    console.log('Intentando registro con:', userData.email);\n    \n    // Nota: el backend espera 'registro' no 'register'\n    return this.http.post<AuthResponse>(`${this.apiUrl}/registro`, userData)\n      .pipe(\n        tap(response => {\n          console.log('Registro exitoso:', response);\n          this.handleAuthSuccess(response);\n        }),\n        catchError(error => {\n          console.error('Error en registro:', error);\n          return this.handleAuthError(error);\n        })\n      );\n  }\n\n  private handleAuthSuccess(response: AuthResponse): void {\n    // Guardar token\n    this.setToken(response.access_token);\n    \n    // Normalizar la respuesta (el backend puede enviar 'usuario' o 'user')\n    const user = response.usuario || (response as any).user;\n    \n    if (user) {\n      // Guardar usuario\n      this.setStoredUser(user);\n      this.currentUserSubject.next(user);\n      this.isLoggedInSubject.next(true);\n    }\n  }\n\n  private handleAuthError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'Error de autenticación';\n    \n    if (error.status === 0) {\n      errorMessage = 'No se puede conectar con el servidor. Verifica que el backend esté ejecutándose.';\n    } else if (error.status === 400) {\n      errorMessage = error.error?.message || 'Datos inválidos';\n    } else if (error.status === 401) {\n      errorMessage = 'Credenciales inválidas';\n    } else if (error.error?.message) {\n      errorMessage = error.error.message;\n    }\n    \n    return throwError(() => new Error(errorMessage));\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  private getStoredUser(): any {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  private setStoredUser(user: any): void {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  getCurrentUser(): any {\n    return this.currentUserSubject.value;\n  }\n\n  // Método para verificar la salud del backend\n  checkBackendHealth(): Observable<any> {\n    return this.http.get(`${environment.apiUrl.replace('/api', '')}/api/health`)\n      .pipe(\n        catchError(error => {\n          console.error('Backend no disponible:', error);\n          return throwError(() => new Error('Backend no disponible'));\n        })\n      );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}