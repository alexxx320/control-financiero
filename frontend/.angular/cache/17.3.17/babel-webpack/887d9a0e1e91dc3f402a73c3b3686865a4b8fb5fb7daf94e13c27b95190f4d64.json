{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FondoService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/fondos`;\n    this.fondosSubject = new BehaviorSubject([]);\n    this.fondos$ = this.fondosSubject.asObservable();\n  }\n  obtenerFondos(tipo) {\n    let params = new HttpParams();\n    if (tipo) {\n      params = params.set('tipo', tipo);\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(tap(fondos => this.fondosSubject.next(fondos)), catchError(error => {\n      console.error('Error al obtener fondos:', error);\n      // Devolver datos simulados en caso de error de conexión\n      const fondosSimulados = [{\n        _id: '1',\n        nombre: 'Fondo de Emergencia',\n        descripcion: 'Para gastos inesperados',\n        tipo: 'emergencia',\n        metaAhorro: 5000000,\n        fechaCreacion: new Date(),\n        activo: true\n      }, {\n        _id: '2',\n        nombre: 'Vacaciones',\n        descripcion: 'Ahorros para viajes',\n        tipo: 'personal',\n        metaAhorro: 3000000,\n        fechaCreacion: new Date(),\n        activo: true\n      }];\n      this.fondosSubject.next(fondosSimulados);\n      return [fondosSimulados];\n    }));\n  }\n  obtenerFondoPorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Error al obtener fondo:', error);\n      throw error;\n    }));\n  }\n  crearFondo(fondo) {\n    return this.http.post(this.apiUrl, fondo).pipe(tap(nuevoFondo => {\n      const fondosActuales = this.fondosSubject.value;\n      this.fondosSubject.next([...fondosActuales, nuevoFondo]);\n    }), catchError(error => {\n      console.error('Error al crear fondo:', error);\n      throw error;\n    }));\n  }\n  actualizarFondo(id, fondo) {\n    return this.http.patch(`${this.apiUrl}/${id}`, fondo).pipe(tap(fondoActualizado => {\n      const fondosActuales = this.fondosSubject.value;\n      const index = fondosActuales.findIndex(f => f._id === id);\n      if (index !== -1) {\n        fondosActuales[index] = fondoActualizado;\n        this.fondosSubject.next([...fondosActuales]);\n      }\n    }), catchError(error => {\n      console.error('Error al actualizar fondo:', error);\n      throw error;\n    }));\n  }\n  eliminarFondo(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const fondosActuales = this.fondosSubject.value;\n      const fondosFiltrados = fondosActuales.filter(f => f._id !== id);\n      this.fondosSubject.next(fondosFiltrados);\n    }), catchError(error => {\n      console.error('Error al eliminar fondo:', error);\n      throw error;\n    }));\n  }\n  obtenerEstadisticasFondo(id) {\n    return this.http.get(`${this.apiUrl}/${id}/estadisticas`).pipe(catchError(error => {\n      console.error('Error al obtener estadísticas:', error);\n      throw error;\n    }));\n  }\n  obtenerEstadisticasGenerales() {\n    return this.http.get(`${this.apiUrl}/estadisticas`).pipe(catchError(error => {\n      console.error('Error al obtener estadísticas generales:', error);\n      throw error;\n    }));\n  }\n  obtenerTiposFondo() {\n    return ['ahorro', 'inversion', 'emergencia', 'gastos', 'personal'];\n  }\n  static {\n    this.ɵfac = function FondoService_Factory(t) {\n      return new (t || FondoService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FondoService,\n      factory: FondoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","tap","catchError","environment","FondoService","constructor","http","apiUrl","fondosSubject","fondos$","asObservable","obtenerFondos","tipo","params","set","get","pipe","fondos","next","error","console","fondosSimulados","_id","nombre","descripcion","metaAhorro","fechaCreacion","Date","activo","obtenerFondoPorId","id","crearFondo","fondo","post","nuevoFondo","fondosActuales","value","actualizarFondo","patch","fondoActualizado","index","findIndex","f","eliminarFondo","delete","fondosFiltrados","filter","obtenerEstadisticasFondo","obtenerEstadisticasGenerales","obtenerTiposFondo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\fondo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Fondo, CreateFondoDto, UpdateFondoDto, TipoFondo } from '../models/fondo.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FondoService {\n  private apiUrl = `${environment.apiUrl}/fondos`;\n  private fondosSubject = new BehaviorSubject<Fondo[]>([]);\n  public fondos$ = this.fondosSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  obtenerFondos(tipo?: string): Observable<Fondo[]> {\n    let params = new HttpParams();\n    if (tipo) {\n      params = params.set('tipo', tipo);\n    }\n\n    return this.http.get<Fondo[]>(this.apiUrl, { params })\n      .pipe(\n        tap(fondos => this.fondosSubject.next(fondos)),\n        catchError(error => {\n          console.error('Error al obtener fondos:', error);\n          // Devolver datos simulados en caso de error de conexión\n          const fondosSimulados: Fondo[] = [\n            {\n              _id: '1',\n              nombre: 'Fondo de Emergencia',\n              descripcion: 'Para gastos inesperados',\n              tipo: 'emergencia',\n              metaAhorro: 5000000,\n              fechaCreacion: new Date(),\n              activo: true\n            },\n            {\n              _id: '2',\n              nombre: 'Vacaciones',\n              descripcion: 'Ahorros para viajes',\n              tipo: 'personal',\n              metaAhorro: 3000000,\n              fechaCreacion: new Date(),\n              activo: true\n            }\n          ];\n          this.fondosSubject.next(fondosSimulados);\n          return [fondosSimulados];\n        })\n      );\n  }\n\n  obtenerFondoPorId(id: string): Observable<Fondo> {\n    return this.http.get<Fondo>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  crearFondo(fondo: CreateFondoDto): Observable<Fondo> {\n    return this.http.post<Fondo>(this.apiUrl, fondo)\n      .pipe(\n        tap(nuevoFondo => {\n          const fondosActuales = this.fondosSubject.value;\n          this.fondosSubject.next([...fondosActuales, nuevoFondo]);\n        }),\n        catchError(error => {\n          console.error('Error al crear fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  actualizarFondo(id: string, fondo: UpdateFondoDto): Observable<Fondo> {\n    return this.http.patch<Fondo>(`${this.apiUrl}/${id}`, fondo)\n      .pipe(\n        tap(fondoActualizado => {\n          const fondosActuales = this.fondosSubject.value;\n          const index = fondosActuales.findIndex(f => f._id === id);\n          if (index !== -1) {\n            fondosActuales[index] = fondoActualizado;\n            this.fondosSubject.next([...fondosActuales]);\n          }\n        }),\n        catchError(error => {\n          console.error('Error al actualizar fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  eliminarFondo(id: string): Observable<{message: string}> {\n    return this.http.delete<{message: string}>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap(() => {\n          const fondosActuales = this.fondosSubject.value;\n          const fondosFiltrados = fondosActuales.filter(f => f._id !== id);\n          this.fondosSubject.next(fondosFiltrados);\n        }),\n        catchError(error => {\n          console.error('Error al eliminar fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerEstadisticasFondo(id: string): Observable<{\n    totalTransacciones: number;\n    totalIngresos: number;\n    totalGastos: number;\n    balance: number;\n    progresoMeta: number;\n    transaccionesRecientes: any[];\n  }> {\n    return this.http.get<{\n      totalTransacciones: number;\n      totalIngresos: number;\n      totalGastos: number;\n      balance: number;\n      progresoMeta: number;\n      transaccionesRecientes: any[];\n    }>(`${this.apiUrl}/${id}/estadisticas`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener estadísticas:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerEstadisticasGenerales(): Observable<{\n    totalFondos: number;\n    fondosConMetas: number;\n    metaPromedioAhorro: number;\n  }> {\n    return this.http.get<{\n      totalFondos: number;\n      fondosConMetas: number;\n      metaPromedioAhorro: number;\n    }>(`${this.apiUrl}/estadisticas`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener estadísticas generales:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerTiposFondo(): TipoFondo[] {\n    return ['ahorro', 'inversion', 'emergencia', 'gastos', 'personal'];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}