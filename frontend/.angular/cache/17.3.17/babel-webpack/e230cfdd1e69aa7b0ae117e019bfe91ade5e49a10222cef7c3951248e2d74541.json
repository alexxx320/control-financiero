{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransaccionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/transacciones`;\n    this.transaccionesSubject = new BehaviorSubject([]);\n    this.estadisticasSubject = new BehaviorSubject(null);\n    this.transacciones$ = this.transaccionesSubject.asObservable();\n    this.estadisticas$ = this.estadisticasSubject.asObservable();\n  }\n  /**\n   * Obtener transacciones con filtros y paginación\n   */\n  obtenerTransacciones(filtros = {}) {\n    let params = new HttpParams();\n    // Agregar parámetros de filtro\n    Object.keys(filtros).forEach(key => {\n      const value = filtros[key];\n      if (value !== undefined && value !== null && value !== '') {\n        if (Array.isArray(value)) {\n          value.forEach(v => params = params.append(key, v));\n        } else {\n          params = params.set(key, value.toString());\n        }\n      }\n    });\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(tap(response => {\n      this.transaccionesSubject.next(response.transacciones);\n      if (response.resumen) {\n        this.actualizarEstadisticas(response.resumen);\n      }\n    }), catchError(error => {\n      console.error('Error al obtener transacciones:', error);\n      return this.generarDatosSimulados(filtros);\n    }));\n  }\n  /**\n   * Obtener una transacción por ID\n   */\n  obtenerTransaccionPorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Error al obtener transacción:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Crear nueva transacción\n   */\n  crearTransaccion(transaccion) {\n    return this.http.post(this.apiUrl, transaccion).pipe(tap(nuevaTransaccion => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n    }), catchError(error => {\n      console.error('Error al crear transacción:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Actualizar transacción existente\n   */\n  actualizarTransaccion(id, transaccion) {\n    return this.http.patch(`${this.apiUrl}/${id}`, transaccion).pipe(tap(transaccionActualizada => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      const index = transaccionesActuales.findIndex(t => t._id === id);\n      if (index !== -1) {\n        transaccionesActuales[index] = transaccionActualizada;\n        this.transaccionesSubject.next([...transaccionesActuales]);\n      }\n    }), catchError(error => {\n      console.error('Error al actualizar transacción:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Eliminar transacción\n   */\n  eliminarTransaccion(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n      this.transaccionesSubject.next(transaccionesFiltradas);\n    }), catchError(error => {\n      console.error('Error al eliminar transacción:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener transacciones de un fondo específico\n   */\n  obtenerTransaccionesPorFondo(fondoId, filtros = {}) {\n    let params = new HttpParams();\n    Object.keys(filtros).forEach(key => {\n      const value = filtros[key];\n      if (value !== undefined && value !== null && value !== '') {\n        params = params.set(key, value.toString());\n      }\n    });\n    return this.http.get(`${this.apiUrl}/fondo/${fondoId}`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error al obtener transacciones por fondo:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener todas las categorías disponibles\n   */\n  obtenerCategorias() {\n    return ['alimentacion', 'transporte', 'salud', 'entretenimiento', 'educacion', 'servicios', 'shopping', 'vivienda', 'seguros', 'salario', 'freelance', 'inversion', 'regalo', 'venta', 'otros'];\n  }\n  /**\n   * Obtener categorías filtradas por tipo\n   */\n  obtenerCategoriasPorTipo(tipo) {\n    const categoriasGastos = ['alimentacion', 'transporte', 'salud', 'entretenimiento', 'educacion', 'servicios', 'shopping', 'vivienda', 'seguros', 'otros'];\n    const categoriasIngresos = ['salario', 'freelance', 'inversion', 'regalo', 'venta', 'otros'];\n    return tipo === 'gasto' ? categoriasGastos : categoriasIngresos;\n  }\n  /**\n   * Actualizar estadísticas internas\n   */\n  actualizarEstadisticas(resumen) {\n    const estadisticas = {\n      totalTransacciones: resumen.totalIngresos + resumen.totalGastos,\n      totalIngresos: resumen.totalIngresos,\n      totalGastos: resumen.totalGastos,\n      balance: resumen.totalIngresos - resumen.totalGastos,\n      promedioTransacciones: 0,\n      categoriaMaxGasto: {\n        categoria: '',\n        monto: 0\n      },\n      categoriaMaxIngreso: {\n        categoria: '',\n        monto: 0\n      },\n      tendenciaMensual: []\n    };\n    this.estadisticasSubject.next(estadisticas);\n  }\n  /**\n   * Generar datos simulados para desarrollo\n   */\n  generarDatosSimulados(filtros) {\n    const transaccionesSimuladas = [{\n      _id: '1',\n      fondoId: '1',\n      descripcion: 'Compra de mercado',\n      monto: 150000,\n      tipo: 'gasto',\n      categoria: 'alimentacion',\n      fecha: new Date(),\n      notas: 'Compras del mes',\n      etiquetas: ['supermercado', 'mensual']\n    }, {\n      _id: '2',\n      fondoId: '2',\n      descripcion: 'Salario mensual',\n      monto: 2500000,\n      tipo: 'ingreso',\n      categoria: 'salario',\n      fecha: new Date(),\n      etiquetas: ['trabajo', 'mensual']\n    }, {\n      _id: '3',\n      fondoId: '1',\n      descripcion: 'Transporte público',\n      monto: 45000,\n      tipo: 'gasto',\n      categoria: 'transporte',\n      fecha: new Date(),\n      notas: 'Semana laboral'\n    }, {\n      _id: '4',\n      fondoId: '3',\n      descripcion: 'Freelance proyecto web',\n      monto: 800000,\n      tipo: 'ingreso',\n      categoria: 'freelance',\n      fecha: new Date(),\n      etiquetas: ['proyecto', 'web']\n    }, {\n      _id: '5',\n      fondoId: '1',\n      descripcion: 'Cena restaurante',\n      monto: 85000,\n      tipo: 'gasto',\n      categoria: 'entretenimiento',\n      fecha: new Date()\n    }];\n    // Aplicar filtros básicos\n    let transaccionesFiltradas = transaccionesSimuladas;\n    if (filtros.tipo) {\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.tipo === filtros.tipo);\n    }\n    if (filtros.categoria) {\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.categoria === filtros.categoria);\n    }\n    if (filtros.fondoId) {\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.fondoId === filtros.fondoId);\n    }\n    const responseSimulada = {\n      transacciones: transaccionesFiltradas,\n      total: transaccionesFiltradas.length,\n      page: filtros.page || 1,\n      totalPages: Math.ceil(transaccionesFiltradas.length / (filtros.limit || 10)),\n      resumen: {\n        totalIngresos: transaccionesFiltradas.filter(t => t.tipo === 'ingreso').reduce((sum, t) => sum + t.monto, 0),\n        totalGastos: transaccionesFiltradas.filter(t => t.tipo === 'gasto').reduce((sum, t) => sum + t.monto, 0),\n        balance: 0,\n        transaccionesPorCategoria: []\n      }\n    };\n    responseSimulada.resumen.balance = responseSimulada.resumen.totalIngresos - responseSimulada.resumen.totalGastos;\n    this.transaccionesSubject.next(responseSimulada.transacciones);\n    return of(responseSimulada);\n  }\n  static {\n    this.ɵfac = function TransaccionService_Factory(t) {\n      return new (t || TransaccionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransaccionService,\n      factory: TransaccionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","of","tap","catchError","environment","TransaccionService","constructor","http","apiUrl","transaccionesSubject","estadisticasSubject","transacciones$","asObservable","estadisticas$","obtenerTransacciones","filtros","params","Object","keys","forEach","key","value","undefined","Array","isArray","v","append","set","toString","get","pipe","response","next","transacciones","resumen","actualizarEstadisticas","error","console","generarDatosSimulados","obtenerTransaccionPorId","id","crearTransaccion","transaccion","post","nuevaTransaccion","transaccionesActuales","actualizarTransaccion","patch","transaccionActualizada","index","findIndex","t","_id","eliminarTransaccion","delete","transaccionesFiltradas","filter","obtenerTransaccionesPorFondo","fondoId","obtenerCategorias","obtenerCategoriasPorTipo","tipo","categoriasGastos","categoriasIngresos","estadisticas","totalTransacciones","totalIngresos","totalGastos","balance","promedioTransacciones","categoriaMaxGasto","categoria","monto","categoriaMaxIngreso","tendenciaMensual","transaccionesSimuladas","descripcion","fecha","Date","notas","etiquetas","responseSimulada","total","length","page","totalPages","Math","ceil","limit","reduce","sum","transaccionesPorCategoria","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\transaccion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { \n  Transaccion, \n  CreateTransaccionDto, \n  UpdateTransaccionDto, \n  TipoTransaccion, \n  CategoriaTransaccion,\n  FiltroTransacciones,\n  ResponseTransacciones,\n  EstadisticasTransacciones\n} from '../models/transaccion.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransaccionService {\n  private apiUrl = `${environment.apiUrl}/transacciones`;\n  private transaccionesSubject = new BehaviorSubject<Transaccion[]>([]);\n  private estadisticasSubject = new BehaviorSubject<EstadisticasTransacciones | null>(null);\n  \n  public transacciones$ = this.transaccionesSubject.asObservable();\n  public estadisticas$ = this.estadisticasSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Obtener transacciones con filtros y paginación\n   */\n  obtenerTransacciones(filtros: FiltroTransacciones = {}): Observable<ResponseTransacciones> {\n    let params = new HttpParams();\n    \n    // Agregar parámetros de filtro\n    Object.keys(filtros).forEach(key => {\n      const value = (filtros as any)[key];\n      if (value !== undefined && value !== null && value !== '') {\n        if (Array.isArray(value)) {\n          value.forEach(v => params = params.append(key, v));\n        } else {\n          params = params.set(key, value.toString());\n        }\n      }\n    });\n\n    return this.http.get<ResponseTransacciones>(this.apiUrl, { params })\n      .pipe(\n        tap(response => {\n          this.transaccionesSubject.next(response.transacciones);\n          if (response.resumen) {\n            this.actualizarEstadisticas(response.resumen);\n          }\n        }),\n        catchError(error => {\n          console.error('Error al obtener transacciones:', error);\n          return this.generarDatosSimulados(filtros);\n        })\n      );\n  }\n\n  /**\n   * Obtener una transacción por ID\n   */\n  obtenerTransaccionPorId(id: string): Observable<Transaccion> {\n    return this.http.get<Transaccion>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Crear nueva transacción\n   */\n  crearTransaccion(transaccion: CreateTransaccionDto): Observable<Transaccion> {\n    return this.http.post<Transaccion>(this.apiUrl, transaccion)\n      .pipe(\n        tap(nuevaTransaccion => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n        }),\n        catchError(error => {\n          console.error('Error al crear transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Actualizar transacción existente\n   */\n  actualizarTransaccion(id: string, transaccion: UpdateTransaccionDto): Observable<Transaccion> {\n    return this.http.patch<Transaccion>(`${this.apiUrl}/${id}`, transaccion)\n      .pipe(\n        tap(transaccionActualizada => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const index = transaccionesActuales.findIndex(t => t._id === id);\n          if (index !== -1) {\n            transaccionesActuales[index] = transaccionActualizada;\n            this.transaccionesSubject.next([...transaccionesActuales]);\n          }\n        }),\n        catchError(error => {\n          console.error('Error al actualizar transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Eliminar transacción\n   */\n  eliminarTransaccion(id: string): Observable<{message: string}> {\n    return this.http.delete<{message: string}>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap(() => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n          this.transaccionesSubject.next(transaccionesFiltradas);\n        }),\n        catchError(error => {\n          console.error('Error al eliminar transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Obtener transacciones de un fondo específico\n   */\n  obtenerTransaccionesPorFondo(\n    fondoId: string, \n    filtros: FiltroTransacciones = {}\n  ): Observable<Transaccion[]> {\n    let params = new HttpParams();\n    \n    Object.keys(filtros).forEach(key => {\n      const value = (filtros as any)[key];\n      if (value !== undefined && value !== null && value !== '') {\n        params = params.set(key, value.toString());\n      }\n    });\n\n    return this.http.get<Transaccion[]>(`${this.apiUrl}/fondo/${fondoId}`, { params })\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener transacciones por fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Obtener todas las categorías disponibles\n   */\n  obtenerCategorias(): CategoriaTransaccion[] {\n    return [\n      'alimentacion',\n      'transporte',\n      'salud', \n      'entretenimiento',\n      'educacion',\n      'servicios',\n      'shopping',\n      'vivienda',\n      'seguros',\n      'salario',\n      'freelance',\n      'inversion',\n      'regalo',\n      'venta',\n      'otros'\n    ];\n  }\n\n  /**\n   * Obtener categorías filtradas por tipo\n   */\n  obtenerCategoriasPorTipo(tipo: TipoTransaccion): CategoriaTransaccion[] {\n    const categoriasGastos: CategoriaTransaccion[] = [\n      'alimentacion', 'transporte', 'salud', 'entretenimiento', \n      'educacion', 'servicios', 'shopping', 'vivienda', 'seguros', 'otros'\n    ];\n    \n    const categoriasIngresos: CategoriaTransaccion[] = [\n      'salario', 'freelance', 'inversion', 'regalo', 'venta', 'otros'\n    ];\n    \n    return tipo === 'gasto' ? categoriasGastos : categoriasIngresos;\n  }\n\n  /**\n   * Actualizar estadísticas internas\n   */\n  private actualizarEstadisticas(resumen: any): void {\n    const estadisticas: EstadisticasTransacciones = {\n      totalTransacciones: resumen.totalIngresos + resumen.totalGastos,\n      totalIngresos: resumen.totalIngresos,\n      totalGastos: resumen.totalGastos,\n      balance: resumen.totalIngresos - resumen.totalGastos,\n      promedioTransacciones: 0,\n      categoriaMaxGasto: { categoria: '', monto: 0 },\n      categoriaMaxIngreso: { categoria: '', monto: 0 },\n      tendenciaMensual: []\n    };\n    \n    this.estadisticasSubject.next(estadisticas);\n  }\n\n  /**\n   * Generar datos simulados para desarrollo\n   */\n  private generarDatosSimulados(filtros: FiltroTransacciones): Observable<ResponseTransacciones> {\n    const transaccionesSimuladas: Transaccion[] = [\n      {\n        _id: '1',\n        fondoId: '1',\n        descripcion: 'Compra de mercado',\n        monto: 150000,\n        tipo: 'gasto',\n        categoria: 'alimentacion',\n        fecha: new Date(),\n        notas: 'Compras del mes',\n        etiquetas: ['supermercado', 'mensual']\n      },\n      {\n        _id: '2',\n        fondoId: '2',\n        descripcion: 'Salario mensual',\n        monto: 2500000,\n        tipo: 'ingreso',\n        categoria: 'salario',\n        fecha: new Date(),\n        etiquetas: ['trabajo', 'mensual']\n      },\n      {\n        _id: '3',\n        fondoId: '1',\n        descripcion: 'Transporte público',\n        monto: 45000,\n        tipo: 'gasto',\n        categoria: 'transporte',\n        fecha: new Date(),\n        notas: 'Semana laboral'\n      },\n      {\n        _id: '4',\n        fondoId: '3',\n        descripcion: 'Freelance proyecto web',\n        monto: 800000,\n        tipo: 'ingreso',\n        categoria: 'freelance',\n        fecha: new Date(),\n        etiquetas: ['proyecto', 'web']\n      },\n      {\n        _id: '5',\n        fondoId: '1',\n        descripcion: 'Cena restaurante',\n        monto: 85000,\n        tipo: 'gasto',\n        categoria: 'entretenimiento',\n        fecha: new Date()\n      }\n    ];\n\n    // Aplicar filtros básicos\n    let transaccionesFiltradas = transaccionesSimuladas;\n    \n    if (filtros.tipo) {\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.tipo === filtros.tipo);\n    }\n    \n    if (filtros.categoria) {\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.categoria === filtros.categoria);\n    }\n    \n    if (filtros.fondoId) {\n      transaccionesFiltradas = transaccionesFiltradas.filter(t => t.fondoId === filtros.fondoId);\n    }\n\n    const responseSimulada: ResponseTransacciones = {\n      transacciones: transaccionesFiltradas,\n      total: transaccionesFiltradas.length,\n      page: filtros.page || 1,\n      totalPages: Math.ceil(transaccionesFiltradas.length / (filtros.limit || 10)),\n      resumen: {\n        totalIngresos: transaccionesFiltradas\n          .filter(t => t.tipo === 'ingreso')\n          .reduce((sum, t) => sum + t.monto, 0),\n        totalGastos: transaccionesFiltradas\n          .filter(t => t.tipo === 'gasto')\n          .reduce((sum, t) => sum + t.monto, 0),\n        balance: 0,\n        transaccionesPorCategoria: []\n      }\n    };\n\n    responseSimulada.resumen!.balance = \n      responseSimulada.resumen!.totalIngresos - responseSimulada.resumen!.totalGastos;\n\n    this.transaccionesSubject.next(responseSimulada.transacciones);\n    return of(responseSimulada);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}