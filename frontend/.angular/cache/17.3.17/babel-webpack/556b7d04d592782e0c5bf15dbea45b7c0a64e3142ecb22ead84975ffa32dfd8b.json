{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/alext/ControlFinanciero/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatListModule } from '@angular/material/list';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/list\";\nfunction TestConnectionComponent_div_28_mat_list_item_4_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const result_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" (Status: \", result_r1.statusCode, \")\");\n  }\n}\nfunction TestConnectionComponent_div_28_mat_list_item_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"mat-icon\", 8);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 10);\n    i0.ɵɵtext(6);\n    i0.ɵɵtemplate(7, TestConnectionComponent_div_28_mat_list_item_4_span_7_Template, 2, 1, \"span\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r1.getIconClass(result_r1.status));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getIcon(result_r1.status), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(result_r1.endpoint);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", result_r1.message, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", result_r1.statusCode);\n  }\n}\nfunction TestConnectionComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h3\");\n    i0.ɵɵtext(2, \"Resultados:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-list\");\n    i0.ɵɵtemplate(4, TestConnectionComponent_div_28_mat_list_item_4_Template, 8, 6, \"mat-list-item\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.results);\n  }\n}\nfunction TestConnectionComponent_div_29_div_7_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1, \" Verifica que el backend est\\u00E9 ejecut\\u00E1ndose: \");\n    i0.ɵɵelementStart(2, \"code\");\n    i0.ɵɵtext(3, \"cd backend && npm run start:dev\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TestConnectionComponent_div_29_div_7_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1, \" Verifica las credenciales de autenticaci\\u00F3n o la configuraci\\u00F3n JWT \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TestConnectionComponent_div_29_div_7_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1, \" Verifica la configuraci\\u00F3n CORS en el backend \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TestConnectionComponent_div_29_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"h4\");\n    i0.ɵɵtext(2, \"Posibles soluciones:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TestConnectionComponent_div_29_div_7_li_4_Template, 4, 0, \"li\", 11)(5, TestConnectionComponent_div_29_div_7_li_5_Template, 2, 0, \"li\", 11)(6, TestConnectionComponent_div_29_div_7_li_6_Template, 2, 0, \"li\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.backendReachable);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.authWorking);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.corsError);\n  }\n}\nfunction TestConnectionComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"mat-card\")(2, \"mat-card-content\")(3, \"h3\")(4, \"mat-icon\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TestConnectionComponent_div_29_div_7_Template, 7, 3, \"div\", 13);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r1.getSummaryClass());\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.getSummaryIcon());\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getSummaryMessage(), \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.allTestsPassed);\n  }\n}\nexport class TestConnectionComponent {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    this.results = [];\n    this.testing = false;\n    this.testCompleted = false;\n    // Flags para el resumen\n    this.backendReachable = false;\n    this.authWorking = false;\n    this.corsError = false;\n    this.allTestsPassed = false;\n  }\n  ngOnInit() {\n    // Opcionalmente, ejecutar las pruebas automáticamente\n    // this.runTests();\n  }\n  runTests() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.testing = true;\n      _this.testCompleted = false;\n      _this.results = [];\n      _this.resetFlags();\n      // Prueba 1: Verificar si el backend responde\n      yield _this.testBackendHealth();\n      // Prueba 2: Verificar la documentación de Swagger\n      yield _this.testSwaggerDocs();\n      // Prueba 3: Verificar autenticación\n      yield _this.testAuth();\n      // Prueba 4: Verificar endpoints protegidos\n      yield _this.testProtectedEndpoint();\n      _this.testing = false;\n      _this.testCompleted = true;\n      _this.evaluateResults();\n    })();\n  }\n  testBackendHealth() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const result = {\n        endpoint: 'Backend Health Check',\n        status: 'pending',\n        message: 'Verificando conexión con el backend...'\n      };\n      _this2.results.push(result);\n      try {\n        const response = yield _this2.http.get('http://localhost:3000/api', {\n          observe: 'response'\n        }).toPromise();\n        result.status = 'success';\n        result.message = 'Backend está ejecutándose correctamente';\n        result.statusCode = response?.status;\n        _this2.backendReachable = true;\n      } catch (error) {\n        result.status = 'error';\n        result.statusCode = error.status || 0;\n        if (error.status === 0) {\n          result.message = 'No se puede conectar con el backend. ¿Está ejecutándose?';\n        } else {\n          result.message = error.message || 'Error al conectar con el backend';\n        }\n        if (error.error?.message?.includes('CORS')) {\n          _this2.corsError = true;\n        }\n      }\n    })();\n  }\n  testSwaggerDocs() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const result = {\n        endpoint: 'API Documentation (Swagger)',\n        status: 'pending',\n        message: 'Verificando documentación de la API...'\n      };\n      _this3.results.push(result);\n      try {\n        const response = yield _this3.http.get(`${_this3.apiUrl}/docs`, {\n          observe: 'response',\n          responseType: 'text'\n        }).toPromise();\n        result.status = 'success';\n        result.message = 'Documentación disponible en /api/docs';\n        result.statusCode = response?.status;\n      } catch (error) {\n        result.status = 'error';\n        result.statusCode = error.status || 0;\n        result.message = 'No se puede acceder a la documentación';\n      }\n    })();\n  }\n  testAuth() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const result = {\n        endpoint: 'Autenticación (Login)',\n        status: 'pending',\n        message: 'Probando endpoint de login...'\n      };\n      _this4.results.push(result);\n      try {\n        const response = yield _this4.http.post(`${_this4.apiUrl}/auth/login`, {\n          email: 'test@test.com',\n          password: 'test123'\n        }, {\n          observe: 'response'\n        }).toPromise();\n        if (response?.body?.access_token) {\n          result.status = 'success';\n          result.message = 'Autenticación funcionando (modo desarrollo)';\n          _this4.authWorking = true;\n        } else {\n          result.status = 'error';\n          result.message = 'Respuesta de autenticación inválida';\n        }\n        result.statusCode = response?.status;\n      } catch (error) {\n        // En desarrollo, el error puede ser esperado si no hay usuarios\n        if (error.status === 401) {\n          result.status = 'success';\n          result.message = 'Endpoint de autenticación responde correctamente';\n          result.statusCode = error.status;\n        } else {\n          result.status = 'error';\n          result.statusCode = error.status || 0;\n          result.message = error.error?.message || 'Error en autenticación';\n        }\n      }\n    })();\n  }\n  testProtectedEndpoint() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const result = {\n        endpoint: 'Endpoint Protegido (/api/fondos)',\n        status: 'pending',\n        message: 'Verificando endpoints protegidos...'\n      };\n      _this5.results.push(result);\n      try {\n        const response = yield _this5.http.get(`${_this5.apiUrl}/fondos`, {\n          observe: 'response'\n        }).toPromise();\n        // Si responde con datos, está funcionando\n        if (Array.isArray(response?.body)) {\n          result.status = 'success';\n          result.message = 'Endpoints protegidos accesibles';\n        } else {\n          result.status = 'success';\n          result.message = 'Endpoint responde (requiere autenticación)';\n        }\n        result.statusCode = response?.status;\n      } catch (error) {\n        if (error.status === 401) {\n          // 401 es esperado sin token\n          result.status = 'success';\n          result.message = 'Protección JWT funcionando correctamente';\n          result.statusCode = error.status;\n        } else {\n          result.status = 'error';\n          result.statusCode = error.status || 0;\n          result.message = error.error?.message || 'Error al acceder al endpoint';\n        }\n      }\n    })();\n  }\n  resetFlags() {\n    this.backendReachable = false;\n    this.authWorking = false;\n    this.corsError = false;\n    this.allTestsPassed = false;\n  }\n  evaluateResults() {\n    const errorCount = this.results.filter(r => r.status === 'error').length;\n    this.allTestsPassed = errorCount === 0 && this.backendReachable;\n  }\n  getIcon(status) {\n    switch (status) {\n      case 'success':\n        return 'check_circle';\n      case 'error':\n        return 'error';\n      default:\n        return 'pending';\n    }\n  }\n  getIconClass(status) {\n    return `${status}-icon`;\n  }\n  getSummaryClass() {\n    return this.allTestsPassed ? 'summary-success' : 'summary-error';\n  }\n  getSummaryIcon() {\n    return this.allTestsPassed ? 'check_circle' : 'warning';\n  }\n  getSummaryMessage() {\n    if (this.allTestsPassed) {\n      return '¡Todas las pruebas pasaron! La conexión está funcionando correctamente.';\n    } else if (!this.backendReachable) {\n      return 'No se puede conectar con el backend. Verifica que esté ejecutándose.';\n    } else {\n      return 'Algunas pruebas fallaron. Revisa los detalles arriba.';\n    }\n  }\n  static {\n    this.ɵfac = function TestConnectionComponent_Factory(t) {\n      return new (t || TestConnectionComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TestConnectionComponent,\n      selectors: [[\"app-test-connection\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 30,\n      vars: 5,\n      consts: [[1, \"test-container\"], [1, \"info-section\"], [1, \"test-section\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", \"disabled\"], [\"class\", \"results-section\", 4, \"ngIf\"], [\"class\", \"summary-section\", 4, \"ngIf\"], [1, \"results-section\"], [4, \"ngFor\", \"ngForOf\"], [\"matListItemIcon\", \"\"], [\"matListItemTitle\", \"\"], [\"matListItemLine\", \"\"], [4, \"ngIf\"], [1, \"summary-section\"], [\"class\", \"troubleshooting\", 4, \"ngIf\"], [1, \"troubleshooting\"]],\n      template: function TestConnectionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\")(2, \"mat-card-header\")(3, \"mat-card-title\")(4, \"mat-icon\");\n          i0.ɵɵtext(5, \"network_check\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(6, \" Prueba de Conexi\\u00F3n Frontend-Backend \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"div\", 1)(9, \"h3\");\n          i0.ɵɵtext(10, \"Configuraci\\u00F3n Actual:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"p\")(12, \"strong\");\n          i0.ɵɵtext(13, \"API URL:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"p\")(16, \"strong\");\n          i0.ɵɵtext(17, \"Frontend:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(18, \" http://localhost:4200\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"p\")(20, \"strong\");\n          i0.ɵɵtext(21, \"Backend:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(22, \" http://localhost:3000\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"div\", 2)(24, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function TestConnectionComponent_Template_button_click_24_listener() {\n            return ctx.runTests();\n          });\n          i0.ɵɵelementStart(25, \"mat-icon\");\n          i0.ɵɵtext(26, \"play_arrow\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(27);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(28, TestConnectionComponent_div_28_Template, 5, 1, \"div\", 4)(29, TestConnectionComponent_div_29_Template, 8, 5, \"div\", 5);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵtextInterpolate1(\" \", ctx.apiUrl, \"\");\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"disabled\", ctx.testing);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" \", ctx.testing ? \"Probando...\" : \"Ejecutar Pruebas\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.results.length > 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.testCompleted);\n        }\n      },\n      dependencies: [CommonModule, i2.NgForOf, i2.NgIf, MatCardModule, i3.MatCard, i3.MatCardContent, i3.MatCardHeader, i3.MatCardTitle, MatButtonModule, i4.MatButton, MatIconModule, i5.MatIcon, MatProgressSpinnerModule, MatListModule, i6.MatList, i6.MatListItem, i6.MatListItemIcon, i6.MatListItemLine, i6.MatListItemTitle],\n      styles: [\".test-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n  max-width: 800px;\\n  margin: 0 auto;\\n}\\n\\n.info-section[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n  padding: 15px;\\n  background-color: #f5f5f5;\\n  border-radius: 4px;\\n}\\n\\n.info-section[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 5px 0;\\n}\\n\\n.test-section[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin: 20px 0;\\n}\\n\\n.results-section[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n\\n.success-icon[_ngcontent-%COMP%] {\\n  color: #4caf50;\\n}\\n\\n.error-icon[_ngcontent-%COMP%] {\\n  color: #f44336;\\n}\\n\\n.pending-icon[_ngcontent-%COMP%] {\\n  color: #ff9800;\\n}\\n\\n.summary-section[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n\\n.summary-success[_ngcontent-%COMP%] {\\n  border-left: 4px solid #4caf50;\\n}\\n\\n.summary-error[_ngcontent-%COMP%] {\\n  border-left: 4px solid #f44336;\\n}\\n\\n.troubleshooting[_ngcontent-%COMP%] {\\n  margin-top: 15px;\\n}\\n\\n.troubleshooting[_ngcontent-%COMP%]   code[_ngcontent-%COMP%] {\\n  background-color: #f5f5f5;\\n  padding: 2px 5px;\\n  border-radius: 3px;\\n}\\n\\nmat-card-title[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  gap: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvdGVzdC1jb25uZWN0aW9uL3Rlc3QtY29ubmVjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDRSxhQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0FBQU47O0FBR0k7RUFDRSxtQkFBQTtFQUNBLGFBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0FBQU47O0FBR0k7RUFDRSxhQUFBO0FBQU47O0FBR0k7RUFDRSxrQkFBQTtFQUNBLGNBQUE7QUFBTjs7QUFHSTtFQUNFLGdCQUFBO0FBQU47O0FBR0k7RUFDRSxjQUFBO0FBQU47O0FBR0k7RUFDRSxjQUFBO0FBQU47O0FBR0k7RUFDRSxjQUFBO0FBQU47O0FBR0k7RUFDRSxnQkFBQTtBQUFOOztBQUdJO0VBQ0UsOEJBQUE7QUFBTjs7QUFHSTtFQUNFLDhCQUFBO0FBQU47O0FBR0k7RUFDRSxnQkFBQTtBQUFOOztBQUdJO0VBQ0UseUJBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0FBQU47O0FBR0k7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxTQUFBO0FBQU4iLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAudGVzdC1jb250YWluZXIge1xuICAgICAgcGFkZGluZzogMjBweDtcbiAgICAgIG1heC13aWR0aDogODAwcHg7XG4gICAgICBtYXJnaW46IDAgYXV0bztcbiAgICB9XG5cbiAgICAuaW5mby1zZWN0aW9uIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICBwYWRkaW5nOiAxNXB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICB9XG5cbiAgICAuaW5mby1zZWN0aW9uIHAge1xuICAgICAgbWFyZ2luOiA1cHggMDtcbiAgICB9XG5cbiAgICAudGVzdC1zZWN0aW9uIHtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIG1hcmdpbjogMjBweCAwO1xuICAgIH1cblxuICAgIC5yZXN1bHRzLXNlY3Rpb24ge1xuICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICB9XG5cbiAgICAuc3VjY2Vzcy1pY29uIHtcbiAgICAgIGNvbG9yOiAjNGNhZjUwO1xuICAgIH1cblxuICAgIC5lcnJvci1pY29uIHtcbiAgICAgIGNvbG9yOiAjZjQ0MzM2O1xuICAgIH1cblxuICAgIC5wZW5kaW5nLWljb24ge1xuICAgICAgY29sb3I6ICNmZjk4MDA7XG4gICAgfVxuXG4gICAgLnN1bW1hcnktc2VjdGlvbiB7XG4gICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgIH1cblxuICAgIC5zdW1tYXJ5LXN1Y2Nlc3Mge1xuICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjNGNhZjUwO1xuICAgIH1cblxuICAgIC5zdW1tYXJ5LWVycm9yIHtcbiAgICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgI2Y0NDMzNjtcbiAgICB9XG5cbiAgICAudHJvdWJsZXNob290aW5nIHtcbiAgICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gICAgfVxuXG4gICAgLnRyb3VibGVzaG9vdGluZyBjb2RlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XG4gICAgICBwYWRkaW5nOiAycHggNXB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgIH1cblxuICAgIG1hdC1jYXJkLXRpdGxlIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZ2FwOiAxMHB4O1xuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","MatCardModule","MatButtonModule","MatIconModule","MatProgressSpinnerModule","MatListModule","environment","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","result_r1","statusCode","ɵɵtemplate","TestConnectionComponent_div_28_mat_list_item_4_span_7_Template","ɵɵclassMap","ctx_r1","getIconClass","status","getIcon","ɵɵtextInterpolate","endpoint","message","ɵɵproperty","TestConnectionComponent_div_28_mat_list_item_4_Template","results","TestConnectionComponent_div_29_div_7_li_4_Template","TestConnectionComponent_div_29_div_7_li_5_Template","TestConnectionComponent_div_29_div_7_li_6_Template","backendReachable","authWorking","corsError","TestConnectionComponent_div_29_div_7_Template","getSummaryClass","getSummaryIcon","getSummaryMessage","allTestsPassed","TestConnectionComponent","constructor","http","apiUrl","testing","testCompleted","ngOnInit","runTests","_this","_asyncToGenerator","resetFlags","testBackendHealth","testSwaggerDocs","testAuth","testProtectedEndpoint","evaluateResults","_this2","result","push","response","get","observe","toPromise","error","includes","_this3","responseType","_this4","post","email","password","body","access_token","_this5","Array","isArray","errorCount","filter","r","length","ɵɵdirectiveInject","i1","HttpClient","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TestConnectionComponent_Template","rf","ctx","ɵɵlistener","TestConnectionComponent_Template_button_click_24_listener","TestConnectionComponent_div_28_Template","TestConnectionComponent_div_29_Template","i2","NgForOf","NgIf","i3","MatCard","MatCardContent","MatCardHeader","MatCardTitle","i4","MatButton","i5","MatIcon","i6","MatList","MatListItem","MatListItemIcon","MatListItemLine","MatListItemTitle","styles"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\features\\test-connection\\test-connection.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatListModule } from '@angular/material/list';\nimport { environment } from '../../../environments/environment';\n\ninterface TestResult {\n  endpoint: string;\n  status: 'success' | 'error' | 'pending';\n  message: string;\n  statusCode?: number;\n}\n\n@Component({\n  selector: 'app-test-connection',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatListModule\n  ],\n  template: `\n    <div class=\"test-container\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>\n            <mat-icon>network_check</mat-icon>\n            Prueba de Conexión Frontend-Backend\n          </mat-card-title>\n        </mat-card-header>\n        \n        <mat-card-content>\n          <div class=\"info-section\">\n            <h3>Configuración Actual:</h3>\n            <p><strong>API URL:</strong> {{ apiUrl }}</p>\n            <p><strong>Frontend:</strong> http://localhost:4200</p>\n            <p><strong>Backend:</strong> http://localhost:3000</p>\n          </div>\n\n          <div class=\"test-section\">\n            <button mat-raised-button color=\"primary\" (click)=\"runTests()\" [disabled]=\"testing\">\n              <mat-icon>play_arrow</mat-icon>\n              {{ testing ? 'Probando...' : 'Ejecutar Pruebas' }}\n            </button>\n          </div>\n\n          <div class=\"results-section\" *ngIf=\"results.length > 0\">\n            <h3>Resultados:</h3>\n            <mat-list>\n              <mat-list-item *ngFor=\"let result of results\">\n                <mat-icon matListItemIcon [class]=\"getIconClass(result.status)\">\n                  {{ getIcon(result.status) }}\n                </mat-icon>\n                <div matListItemTitle>{{ result.endpoint }}</div>\n                <div matListItemLine>\n                  {{ result.message }}\n                  <span *ngIf=\"result.statusCode\"> (Status: {{ result.statusCode }})</span>\n                </div>\n              </mat-list-item>\n            </mat-list>\n          </div>\n\n          <div class=\"summary-section\" *ngIf=\"testCompleted\">\n            <mat-card [class]=\"getSummaryClass()\">\n              <mat-card-content>\n                <h3>\n                  <mat-icon>{{ getSummaryIcon() }}</mat-icon>\n                  {{ getSummaryMessage() }}\n                </h3>\n                <div *ngIf=\"!allTestsPassed\" class=\"troubleshooting\">\n                  <h4>Posibles soluciones:</h4>\n                  <ul>\n                    <li *ngIf=\"!backendReachable\">\n                      Verifica que el backend esté ejecutándose:\n                      <code>cd backend && npm run start:dev</code>\n                    </li>\n                    <li *ngIf=\"!authWorking\">\n                      Verifica las credenciales de autenticación o la configuración JWT\n                    </li>\n                    <li *ngIf=\"corsError\">\n                      Verifica la configuración CORS en el backend\n                    </li>\n                  </ul>\n                </div>\n              </mat-card-content>\n            </mat-card>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .test-container {\n      padding: 20px;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n\n    .info-section {\n      margin-bottom: 20px;\n      padding: 15px;\n      background-color: #f5f5f5;\n      border-radius: 4px;\n    }\n\n    .info-section p {\n      margin: 5px 0;\n    }\n\n    .test-section {\n      text-align: center;\n      margin: 20px 0;\n    }\n\n    .results-section {\n      margin-top: 20px;\n    }\n\n    .success-icon {\n      color: #4caf50;\n    }\n\n    .error-icon {\n      color: #f44336;\n    }\n\n    .pending-icon {\n      color: #ff9800;\n    }\n\n    .summary-section {\n      margin-top: 20px;\n    }\n\n    .summary-success {\n      border-left: 4px solid #4caf50;\n    }\n\n    .summary-error {\n      border-left: 4px solid #f44336;\n    }\n\n    .troubleshooting {\n      margin-top: 15px;\n    }\n\n    .troubleshooting code {\n      background-color: #f5f5f5;\n      padding: 2px 5px;\n      border-radius: 3px;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n  `]\n})\nexport class TestConnectionComponent implements OnInit {\n  apiUrl = environment.apiUrl;\n  results: TestResult[] = [];\n  testing = false;\n  testCompleted = false;\n  \n  // Flags para el resumen\n  backendReachable = false;\n  authWorking = false;\n  corsError = false;\n  allTestsPassed = false;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    // Opcionalmente, ejecutar las pruebas automáticamente\n    // this.runTests();\n  }\n\n  async runTests() {\n    this.testing = true;\n    this.testCompleted = false;\n    this.results = [];\n    this.resetFlags();\n\n    // Prueba 1: Verificar si el backend responde\n    await this.testBackendHealth();\n\n    // Prueba 2: Verificar la documentación de Swagger\n    await this.testSwaggerDocs();\n\n    // Prueba 3: Verificar autenticación\n    await this.testAuth();\n\n    // Prueba 4: Verificar endpoints protegidos\n    await this.testProtectedEndpoint();\n\n    this.testing = false;\n    this.testCompleted = true;\n    this.evaluateResults();\n  }\n\n  private async testBackendHealth() {\n    const result: TestResult = {\n      endpoint: 'Backend Health Check',\n      status: 'pending',\n      message: 'Verificando conexión con el backend...'\n    };\n    this.results.push(result);\n\n    try {\n      const response = await this.http.get<any>('http://localhost:3000/api', { \n        observe: 'response' \n      }).toPromise();\n      \n      result.status = 'success';\n      result.message = 'Backend está ejecutándose correctamente';\n      result.statusCode = response?.status;\n      this.backendReachable = true;\n    } catch (error: any) {\n      result.status = 'error';\n      result.statusCode = error.status || 0;\n      \n      if (error.status === 0) {\n        result.message = 'No se puede conectar con el backend. ¿Está ejecutándose?';\n      } else {\n        result.message = error.message || 'Error al conectar con el backend';\n      }\n      \n      if (error.error?.message?.includes('CORS')) {\n        this.corsError = true;\n      }\n    }\n  }\n\n  private async testSwaggerDocs() {\n    const result: TestResult = {\n      endpoint: 'API Documentation (Swagger)',\n      status: 'pending',\n      message: 'Verificando documentación de la API...'\n    };\n    this.results.push(result);\n\n    try {\n      const response = await this.http.get<any>(`${this.apiUrl}/docs`, { \n        observe: 'response',\n        responseType: 'text' as 'json'\n      }).toPromise();\n      \n      result.status = 'success';\n      result.message = 'Documentación disponible en /api/docs';\n      result.statusCode = response?.status;\n    } catch (error: any) {\n      result.status = 'error';\n      result.statusCode = error.status || 0;\n      result.message = 'No se puede acceder a la documentación';\n    }\n  }\n\n  private async testAuth() {\n    const result: TestResult = {\n      endpoint: 'Autenticación (Login)',\n      status: 'pending',\n      message: 'Probando endpoint de login...'\n    };\n    this.results.push(result);\n\n    try {\n      const response = await this.http.post<any>(`${this.apiUrl}/auth/login`, {\n        email: 'test@test.com',\n        password: 'test123'\n      }, { observe: 'response' }).toPromise();\n      \n      if (response?.body?.access_token) {\n        result.status = 'success';\n        result.message = 'Autenticación funcionando (modo desarrollo)';\n        this.authWorking = true;\n      } else {\n        result.status = 'error';\n        result.message = 'Respuesta de autenticación inválida';\n      }\n      result.statusCode = response?.status;\n    } catch (error: any) {\n      // En desarrollo, el error puede ser esperado si no hay usuarios\n      if (error.status === 401) {\n        result.status = 'success';\n        result.message = 'Endpoint de autenticación responde correctamente';\n        result.statusCode = error.status;\n      } else {\n        result.status = 'error';\n        result.statusCode = error.status || 0;\n        result.message = error.error?.message || 'Error en autenticación';\n      }\n    }\n  }\n\n  private async testProtectedEndpoint() {\n    const result: TestResult = {\n      endpoint: 'Endpoint Protegido (/api/fondos)',\n      status: 'pending',\n      message: 'Verificando endpoints protegidos...'\n    };\n    this.results.push(result);\n\n    try {\n      const response = await this.http.get<any>(`${this.apiUrl}/fondos`, { \n        observe: 'response' \n      }).toPromise();\n      \n      // Si responde con datos, está funcionando\n      if (Array.isArray(response?.body)) {\n        result.status = 'success';\n        result.message = 'Endpoints protegidos accesibles';\n      } else {\n        result.status = 'success';\n        result.message = 'Endpoint responde (requiere autenticación)';\n      }\n      result.statusCode = response?.status;\n    } catch (error: any) {\n      if (error.status === 401) {\n        // 401 es esperado sin token\n        result.status = 'success';\n        result.message = 'Protección JWT funcionando correctamente';\n        result.statusCode = error.status;\n      } else {\n        result.status = 'error';\n        result.statusCode = error.status || 0;\n        result.message = error.error?.message || 'Error al acceder al endpoint';\n      }\n    }\n  }\n\n  private resetFlags() {\n    this.backendReachable = false;\n    this.authWorking = false;\n    this.corsError = false;\n    this.allTestsPassed = false;\n  }\n\n  private evaluateResults() {\n    const errorCount = this.results.filter(r => r.status === 'error').length;\n    this.allTestsPassed = errorCount === 0 && this.backendReachable;\n  }\n\n  getIcon(status: string): string {\n    switch (status) {\n      case 'success': return 'check_circle';\n      case 'error': return 'error';\n      default: return 'pending';\n    }\n  }\n\n  getIconClass(status: string): string {\n    return `${status}-icon`;\n  }\n\n  getSummaryClass(): string {\n    return this.allTestsPassed ? 'summary-success' : 'summary-error';\n  }\n\n  getSummaryIcon(): string {\n    return this.allTestsPassed ? 'check_circle' : 'warning';\n  }\n\n  getSummaryMessage(): string {\n    if (this.allTestsPassed) {\n      return '¡Todas las pruebas pasaron! La conexión está funcionando correctamente.';\n    } else if (!this.backendReachable) {\n      return 'No se puede conectar con el backend. Verifica que esté ejecutándose.';\n    } else {\n      return 'Algunas pruebas fallaron. Revisa los detalles arriba.';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}