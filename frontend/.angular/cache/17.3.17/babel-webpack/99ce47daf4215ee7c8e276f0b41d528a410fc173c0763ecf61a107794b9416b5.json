{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FondoService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/fondos`;\n    this.fondosSubject = new BehaviorSubject([]);\n    this.fondos$ = this.fondosSubject.asObservable();\n  }\n  obtenerFondos(tipo) {\n    console.log('üè¶ Obteniendo fondos del backend...');\n    let params = new HttpParams();\n    if (tipo) {\n      params = params.set('tipo', tipo);\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(tap(fondos => {\n      console.log('‚úÖ Fondos obtenidos exitosamente:', fondos);\n      this.fondosSubject.next(fondos);\n    }), catchError(error => {\n      console.error('‚ùå Error al obtener fondos - NO se usar√°n datos simulados:', error);\n      let mensaje = 'Error al cargar fondos';\n      if (error.status === 0) {\n        mensaje = 'No se puede conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.';\n      } else if (error.status === 401) {\n        mensaje = 'No autorizado. Tu sesi√≥n puede haber expirado.';\n      } else if (error.status === 500) {\n        mensaje = 'Error del servidor. Verifica que MongoDB est√© ejecut√°ndose.';\n      }\n      return throwError(() => ({\n        ...error,\n        message: mensaje\n      }));\n    }));\n  }\n  obtenerFondoPorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Error al obtener fondo:', error);\n      throw error;\n    }));\n  }\n  crearFondo(fondo) {\n    return this.http.post(this.apiUrl, fondo).pipe(tap(nuevoFondo => {\n      const fondosActuales = this.fondosSubject.value;\n      this.fondosSubject.next([...fondosActuales, nuevoFondo]);\n    }), catchError(error => {\n      console.error('Error al crear fondo:', error);\n      throw error;\n    }));\n  }\n  actualizarFondo(id, fondo) {\n    return this.http.patch(`${this.apiUrl}/${id}`, fondo).pipe(tap(fondoActualizado => {\n      const fondosActuales = this.fondosSubject.value;\n      const index = fondosActuales.findIndex(f => f._id === id);\n      if (index !== -1) {\n        fondosActuales[index] = fondoActualizado;\n        this.fondosSubject.next([...fondosActuales]);\n      }\n    }), catchError(error => {\n      console.error('Error al actualizar fondo:', error);\n      throw error;\n    }));\n  }\n  eliminarFondo(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const fondosActuales = this.fondosSubject.value;\n      const fondosFiltrados = fondosActuales.filter(f => f._id !== id);\n      this.fondosSubject.next(fondosFiltrados);\n    }), catchError(error => {\n      console.error('Error al eliminar fondo:', error);\n      throw error;\n    }));\n  }\n  obtenerEstadisticasFondo(id) {\n    return this.http.get(`${this.apiUrl}/${id}/estadisticas`).pipe(catchError(error => {\n      console.error('Error al obtener estad√≠sticas:', error);\n      throw error;\n    }));\n  }\n  obtenerEstadisticasGenerales() {\n    return this.http.get(`${this.apiUrl}/estadisticas`).pipe(catchError(error => {\n      console.error('Error al obtener estad√≠sticas generales:', error);\n      throw error;\n    }));\n  }\n  obtenerTiposFondo() {\n    return ['ahorro', 'inversion', 'emergencia', 'gastos', 'personal'];\n  }\n  static {\n    this.…µfac = function FondoService_Factory(t) {\n      return new (t || FondoService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: FondoService,\n      factory: FondoService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","tap","catchError","environment","FondoService","constructor","http","apiUrl","fondosSubject","fondos$","asObservable","obtenerFondos","tipo","console","log","params","set","get","pipe","fondos","next","error","mensaje","status","throwError","message","obtenerFondoPorId","id","crearFondo","fondo","post","nuevoFondo","fondosActuales","value","actualizarFondo","patch","fondoActualizado","index","findIndex","f","_id","eliminarFondo","delete","fondosFiltrados","filter","obtenerEstadisticasFondo","obtenerEstadisticasGenerales","obtenerTiposFondo","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\fondo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Fondo, CreateFondoDto, UpdateFondoDto, TipoFondo } from '../models/fondo.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FondoService {\n  private apiUrl = `${environment.apiUrl}/fondos`;\n  private fondosSubject = new BehaviorSubject<Fondo[]>([]);\n  public fondos$ = this.fondosSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  obtenerFondos(tipo?: string): Observable<Fondo[]> {\n    console.log('üè¶ Obteniendo fondos del backend...');\n    \n    let params = new HttpParams();\n    if (tipo) {\n      params = params.set('tipo', tipo);\n    }\n\n    return this.http.get<Fondo[]>(this.apiUrl, { params })\n      .pipe(\n        tap(fondos => {\n          console.log('‚úÖ Fondos obtenidos exitosamente:', fondos);\n          this.fondosSubject.next(fondos);\n        }),\n        catchError(error => {\n          console.error('‚ùå Error al obtener fondos - NO se usar√°n datos simulados:', error);\n          \n          let mensaje = 'Error al cargar fondos';\n          if (error.status === 0) {\n            mensaje = 'No se puede conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.';\n          } else if (error.status === 401) {\n            mensaje = 'No autorizado. Tu sesi√≥n puede haber expirado.';\n          } else if (error.status === 500) {\n            mensaje = 'Error del servidor. Verifica que MongoDB est√© ejecut√°ndose.';\n          }\n          \n          return throwError(() => ({\n            ...error,\n            message: mensaje\n          }));\n        })\n      );\n  }\n\n  obtenerFondoPorId(id: string): Observable<Fondo> {\n    return this.http.get<Fondo>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  crearFondo(fondo: CreateFondoDto): Observable<Fondo> {\n    return this.http.post<Fondo>(this.apiUrl, fondo)\n      .pipe(\n        tap(nuevoFondo => {\n          const fondosActuales = this.fondosSubject.value;\n          this.fondosSubject.next([...fondosActuales, nuevoFondo]);\n        }),\n        catchError(error => {\n          console.error('Error al crear fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  actualizarFondo(id: string, fondo: UpdateFondoDto): Observable<Fondo> {\n    return this.http.patch<Fondo>(`${this.apiUrl}/${id}`, fondo)\n      .pipe(\n        tap(fondoActualizado => {\n          const fondosActuales = this.fondosSubject.value;\n          const index = fondosActuales.findIndex(f => f._id === id);\n          if (index !== -1) {\n            fondosActuales[index] = fondoActualizado;\n            this.fondosSubject.next([...fondosActuales]);\n          }\n        }),\n        catchError(error => {\n          console.error('Error al actualizar fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  eliminarFondo(id: string): Observable<{message: string}> {\n    return this.http.delete<{message: string}>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap(() => {\n          const fondosActuales = this.fondosSubject.value;\n          const fondosFiltrados = fondosActuales.filter(f => f._id !== id);\n          this.fondosSubject.next(fondosFiltrados);\n        }),\n        catchError(error => {\n          console.error('Error al eliminar fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerEstadisticasFondo(id: string): Observable<{\n    totalTransacciones: number;\n    totalIngresos: number;\n    totalGastos: number;\n    balance: number;\n    progresoMeta: number;\n    transaccionesRecientes: any[];\n  }> {\n    return this.http.get<{\n      totalTransacciones: number;\n      totalIngresos: number;\n      totalGastos: number;\n      balance: number;\n      progresoMeta: number;\n      transaccionesRecientes: any[];\n    }>(`${this.apiUrl}/${id}/estadisticas`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener estad√≠sticas:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerEstadisticasGenerales(): Observable<{\n    totalFondos: number;\n    fondosConMetas: number;\n    metaPromedioAhorro: number;\n  }> {\n    return this.http.get<{\n      totalFondos: number;\n      fondosConMetas: number;\n      metaPromedioAhorro: number;\n    }>(`${this.apiUrl}/estadisticas`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener estad√≠sticas generales:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerTiposFondo(): TipoFondo[] {\n    return ['ahorro', 'inversion', 'emergencia', 'gastos', 'personal'];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}