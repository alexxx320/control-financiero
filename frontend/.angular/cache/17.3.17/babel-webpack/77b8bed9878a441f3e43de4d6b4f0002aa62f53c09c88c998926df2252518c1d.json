{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError, delay } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    // Verificar si hay token guardado al iniciar\n    const token = this.getToken();\n    if (token) {\n      this.isLoggedInSubject.next(true);\n      // Simular usuario para desarrollo\n      this.currentUserSubject.next({\n        id: '1',\n        nombre: 'Usuario Demo',\n        email: 'demo@example.com'\n      });\n    }\n  }\n  login(credentials) {\n    // Primero intentar con el backend real\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      this.handleAuthSuccess(response);\n    }), catchError(error => {\n      console.log('Backend no disponible, usando modo demo');\n      // Si falla, usar modo demo\n      return this.loginDemo(credentials);\n    }));\n  }\n  loginDemo(credentials) {\n    // Simular login exitoso después de un pequeño delay\n    const demoResponse = {\n      access_token: 'demo-jwt-token-' + Date.now(),\n      user: {\n        id: '1',\n        nombre: 'Usuario Demo',\n        email: credentials.email\n      }\n    };\n    return of(demoResponse).pipe(delay(500),\n    // Simular latencia de red\n    tap(response => {\n      this.handleAuthSuccess(response);\n    }));\n  }\n  handleAuthSuccess(response) {\n    this.setToken(response.access_token);\n    this.currentUserSubject.next(response.user);\n    this.isLoggedInSubject.next(true);\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      this.handleAuthSuccess(response);\n    }), catchError(error => {\n      console.error('Error en registro:', error);\n      // En desarrollo, simular registro exitoso\n      return this.loginDemo({\n        email: userData.email,\n        password: 'demo'\n      });\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","tap","catchError","delay","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","isLoggedInSubject","isLoggedIn$","token","getToken","next","id","nombre","email","login","credentials","post","pipe","response","handleAuthSuccess","error","console","log","loginDemo","demoResponse","access_token","Date","now","user","setToken","register","userData","password","logout","localStorage","removeItem","getItem","setItem","isAuthenticated","getCurrentUser","value","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError, delay } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterDto {\n  nombre: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  user: {\n    id: string;\n    nombre: string;\n    email: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<any>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Verificar si hay token guardado al iniciar\n    const token = this.getToken();\n    if (token) {\n      this.isLoggedInSubject.next(true);\n      // Simular usuario para desarrollo\n      this.currentUserSubject.next({\n        id: '1',\n        nombre: 'Usuario Demo',\n        email: 'demo@example.com'\n      });\n    }\n  }\n\n  login(credentials: LoginDto): Observable<AuthResponse> {\n    // Primero intentar con el backend real\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          this.handleAuthSuccess(response);\n        }),\n        catchError(error => {\n          console.log('Backend no disponible, usando modo demo');\n          // Si falla, usar modo demo\n          return this.loginDemo(credentials);\n        })\n      );\n  }\n\n  private loginDemo(credentials: LoginDto): Observable<AuthResponse> {\n    // Simular login exitoso después de un pequeño delay\n    const demoResponse: AuthResponse = {\n      access_token: 'demo-jwt-token-' + Date.now(),\n      user: {\n        id: '1',\n        nombre: 'Usuario Demo',\n        email: credentials.email\n      }\n    };\n\n    return of(demoResponse).pipe(\n      delay(500), // Simular latencia de red\n      tap(response => {\n        this.handleAuthSuccess(response);\n      })\n    );\n  }\n\n  private handleAuthSuccess(response: AuthResponse): void {\n    this.setToken(response.access_token);\n    this.currentUserSubject.next(response.user);\n    this.isLoggedInSubject.next(true);\n  }\n\n  register(userData: RegisterDto): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData)\n      .pipe(\n        tap(response => {\n          this.handleAuthSuccess(response);\n        }),\n        catchError(error => {\n          console.error('Error en registro:', error);\n          // En desarrollo, simular registro exitoso\n          return this.loginDemo({ email: userData.email, password: 'demo' });\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  getCurrentUser(): any {\n    return this.currentUserSubject.value;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}