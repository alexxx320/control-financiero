{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    // Verificar si hay token guardado\n    const token = this.getToken();\n    if (token) {\n      this.isLoggedInSubject.next(true);\n      // Aquí podrías decodificar el token para obtener info del usuario\n    }\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.user);\n      this.isLoggedInSubject.next(true);\n    }), catchError(error => {\n      console.error('Error en login:', error);\n      // Para desarrollo, simular login exitoso\n      const simulatedResponse = {\n        access_token: 'fake-jwt-token',\n        user: {\n          id: '1',\n          nombre: 'Usuario Demo',\n          email: credentials.email\n        }\n      };\n      this.setToken(simulatedResponse.access_token);\n      this.currentUserSubject.next(simulatedResponse.user);\n      this.isLoggedInSubject.next(true);\n      return [simulatedResponse];\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.user);\n      this.isLoggedInSubject.next(true);\n    }), catchError(error => {\n      console.error('Error en registro:', error);\n      throw error;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","catchError","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","isLoggedInSubject","isLoggedIn$","token","getToken","next","login","credentials","post","pipe","response","setToken","access_token","user","error","console","simulatedResponse","id","nombre","email","register","userData","logout","localStorage","removeItem","getItem","setItem","isAuthenticated","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterDto {\n  nombre: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  user: {\n    id: string;\n    nombre: string;\n    email: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<any>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Verificar si hay token guardado\n    const token = this.getToken();\n    if (token) {\n      this.isLoggedInSubject.next(true);\n      // Aquí podrías decodificar el token para obtener info del usuario\n    }\n  }\n\n  login(credentials: LoginDto): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.user);\n          this.isLoggedInSubject.next(true);\n        }),\n        catchError(error => {\n          console.error('Error en login:', error);\n          // Para desarrollo, simular login exitoso\n          const simulatedResponse: AuthResponse = {\n            access_token: 'fake-jwt-token',\n            user: {\n              id: '1',\n              nombre: 'Usuario Demo',\n              email: credentials.email\n            }\n          };\n          this.setToken(simulatedResponse.access_token);\n          this.currentUserSubject.next(simulatedResponse.user);\n          this.isLoggedInSubject.next(true);\n          return [simulatedResponse];\n        })\n      );\n  }\n\n  register(userData: RegisterDto): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData)\n      .pipe(\n        tap(response => {\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.user);\n          this.isLoggedInSubject.next(true);\n        }),\n        catchError(error => {\n          console.error('Error en registro:', error);\n          throw error;\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}