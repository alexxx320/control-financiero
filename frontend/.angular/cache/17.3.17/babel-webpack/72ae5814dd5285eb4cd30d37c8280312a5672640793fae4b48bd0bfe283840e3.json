{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    this.verificarSesionExistente();\n  }\n  /**\n   * Verificar si hay una sesi√≥n activa al inicializar el servicio\n   */\n  verificarSesionExistente() {\n    const token = this.getToken();\n    if (token) {\n      console.log('üîç Verificando token existente:', token.substring(0, 20) + '...');\n      // Verificar si el token es v√°lido obteniendo el perfil\n      this.obtenerPerfil().subscribe({\n        next: user => {\n          console.log('‚úÖ Token v√°lido, usuario autenticado:', user);\n          this.currentUserSubject.next(user);\n          this.isLoggedInSubject.next(true);\n        },\n        error: error => {\n          console.error('‚ùå Token inv√°lido, limpiando sesi√≥n:', error);\n          this.limpiarSesion();\n        }\n      });\n    } else {\n      console.log('üö´ No hay token guardado');\n    }\n  }\n  /**\n   * Iniciar sesi√≥n\n   */\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.user);\n      this.isLoggedInSubject.next(true);\n    }), catchError(error => {\n      console.error('Error en login:', error);\n      // Para desarrollo, permitir login con cualquier credencial\n      if (environment.production === false) {\n        const simulatedResponse = {\n          access_token: 'dev-token-' + Date.now(),\n          user: {\n            id: '1',\n            nombre: credentials.email.split('@')[0],\n            email: credentials.email,\n            rol: 'usuario'\n          }\n        };\n        this.setToken(simulatedResponse.access_token);\n        this.currentUserSubject.next(simulatedResponse.user);\n        this.isLoggedInSubject.next(true);\n        return of(simulatedResponse);\n      }\n      throw error;\n    }));\n  }\n  /**\n   * Registrar nuevo usuario\n   */\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/registro`, userData).pipe(tap(response => {\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.user);\n      this.isLoggedInSubject.next(true);\n    }), catchError(error => {\n      console.error('Error en registro:', error);\n      // Para desarrollo, simular registro exitoso\n      if (environment.production === false) {\n        const simulatedResponse = {\n          access_token: 'dev-token-' + Date.now(),\n          user: {\n            id: '1',\n            nombre: userData.nombre,\n            apellido: userData.apellido,\n            email: userData.email,\n            telefono: userData.telefono,\n            rol: 'usuario'\n          }\n        };\n        this.setToken(simulatedResponse.access_token);\n        this.currentUserSubject.next(simulatedResponse.user);\n        this.isLoggedInSubject.next(true);\n        return of(simulatedResponse);\n      }\n      throw error;\n    }));\n  }\n  /**\n   * Obtener perfil del usuario actual\n   */\n  obtenerPerfil() {\n    return this.http.get(`${this.apiUrl}/perfil`).pipe(catchError(error => {\n      console.error('Error al obtener perfil:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Verificar si un email est√° disponible\n   */\n  verificarEmailDisponible(email) {\n    return this.http.post(`${this.apiUrl}/verificar-email`, {\n      email\n    }).pipe(map(response => response.disponible), catchError(() => of(true)) // En caso de error, asumir que est√° disponible\n    );\n  }\n  /**\n   * Cambiar contrase√±a\n   */\n  cambiarPassword(passwordActual, passwordNueva) {\n    return this.http.patch(`${this.apiUrl}/cambiar-password`, {\n      passwordActual,\n      passwordNueva\n    });\n  }\n  /**\n   * Renovar token\n   */\n  renovarToken() {\n    return this.http.post(`${this.apiUrl}/renovar-token`, {}).pipe(tap(response => {\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  /**\n   * Cerrar sesi√≥n\n   */\n  logout() {\n    // Llamar al endpoint de logout si hay token\n    if (this.getToken()) {\n      this.http.post(`${this.apiUrl}/logout`, {}).subscribe({\n        complete: () => this.limpiarSesion()\n      });\n    } else {\n      this.limpiarSesion();\n    }\n  }\n  /**\n   * Verificar si el usuario est√° autenticado\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    // Verificar si el token no ha expirado (opcional)\n    try {\n      const payload = this.decodeToken(token);\n      const now = Date.now() / 1000;\n      return payload.exp > now;\n    } catch {\n      return false;\n    }\n  }\n  /**\n   * Obtener token del localStorage\n   */\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n  /**\n   * Obtener usuario actual\n   */\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  /**\n   * Guardar token en localStorage\n   */\n  setToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n  /**\n   * Limpiar sesi√≥n completa\n   */\n  limpiarSesion() {\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n  /**\n   * Decodificar token JWT (sin verificaci√≥n)\n   */\n  decodeToken(token) {\n    try {\n      const payload = token.split('.')[1];\n      return JSON.parse(atob(payload));\n    } catch {\n      return {};\n    }\n  }\n  static {\n    this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","catchError","map","environment","AuthService","constructor","http","router","apiUrl","currentUserSubject","isLoggedInSubject","currentUser$","asObservable","isLoggedIn$","verificarSesionExistente","token","getToken","console","log","substring","obtenerPerfil","subscribe","next","user","error","limpiarSesion","login","credentials","post","pipe","response","setToken","access_token","production","simulatedResponse","Date","now","id","nombre","email","split","rol","of","register","userData","apellido","telefono","get","verificarEmailDisponible","disponible","cambiarPassword","passwordActual","passwordNueva","patch","renovarToken","logout","complete","isAuthenticated","payload","decodeToken","exp","localStorage","getItem","getCurrentUser","value","setItem","removeItem","JSON","parse","atob","i0","…µ…µinject","i1","HttpClient","i2","Router","factory","…µfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../environments/environment';\n\nexport interface Usuario {\n  id: string;\n  nombre: string;\n  apellido?: string;\n  email: string;\n  rol?: string;\n  telefono?: string;\n  avatar?: string;\n  fechaRegistro?: Date;\n  ultimoLogin?: Date;\n}\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterDto {\n  nombre: string;\n  apellido?: string;\n  email: string;\n  password: string;\n  telefono?: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  usuario: Usuario; // CORREGIDO: 'usuario' en lugar de 'user'\n  expires_in?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<Usuario | null>(null);\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  \n  public currentUser$ = this.currentUserSubject.asObservable();\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    this.verificarSesionExistente();\n  }\n\n  /**\n   * Verificar si hay una sesi√≥n activa al inicializar el servicio\n   */\n  private verificarSesionExistente(): void {\n    const token = this.getToken();\n    if (token) {\n      console.log('üîç Verificando token existente:', token.substring(0, 20) + '...');\n      \n      // Verificar si el token es v√°lido obteniendo el perfil\n      this.obtenerPerfil().subscribe({\n        next: (user) => {\n          console.log('‚úÖ Token v√°lido, usuario autenticado:', user);\n          this.currentUserSubject.next(user);\n          this.isLoggedInSubject.next(true);\n        },\n        error: (error) => {\n          console.error('‚ùå Token inv√°lido, limpiando sesi√≥n:', error);\n          this.limpiarSesion();\n        }\n      });\n    } else {\n      console.log('üö´ No hay token guardado');\n    }\n  }\n\n  /**\n   * Iniciar sesi√≥n\n   */\n  login(credentials: LoginDto): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.user);\n          this.isLoggedInSubject.next(true);\n        }),\n        catchError(error => {\n          console.error('Error en login:', error);\n          // Para desarrollo, permitir login con cualquier credencial\n          if (environment.production === false) {\n            const simulatedResponse: AuthResponse = {\n              access_token: 'dev-token-' + Date.now(),\n              user: {\n                id: '1',\n                nombre: credentials.email.split('@')[0],\n                email: credentials.email,\n                rol: 'usuario'\n              }\n            };\n            this.setToken(simulatedResponse.access_token);\n            this.currentUserSubject.next(simulatedResponse.user);\n            this.isLoggedInSubject.next(true);\n            return of(simulatedResponse);\n          }\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Registrar nuevo usuario\n   */\n  register(userData: RegisterDto): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/registro`, userData)\n      .pipe(\n        tap(response => {\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.user);\n          this.isLoggedInSubject.next(true);\n        }),\n        catchError(error => {\n          console.error('Error en registro:', error);\n          // Para desarrollo, simular registro exitoso\n          if (environment.production === false) {\n            const simulatedResponse: AuthResponse = {\n              access_token: 'dev-token-' + Date.now(),\n              user: {\n                id: '1',\n                nombre: userData.nombre,\n                apellido: userData.apellido,\n                email: userData.email,\n                telefono: userData.telefono,\n                rol: 'usuario'\n              }\n            };\n            this.setToken(simulatedResponse.access_token);\n            this.currentUserSubject.next(simulatedResponse.user);\n            this.isLoggedInSubject.next(true);\n            return of(simulatedResponse);\n          }\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Obtener perfil del usuario actual\n   */\n  obtenerPerfil(): Observable<Usuario> {\n    return this.http.get<Usuario>(`${this.apiUrl}/perfil`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener perfil:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Verificar si un email est√° disponible\n   */\n  verificarEmailDisponible(email: string): Observable<boolean> {\n    return this.http.post<{disponible: boolean}>(`${this.apiUrl}/verificar-email`, { email })\n      .pipe(\n        map(response => response.disponible),\n        catchError(() => of(true)) // En caso de error, asumir que est√° disponible\n      );\n  }\n\n  /**\n   * Cambiar contrase√±a\n   */\n  cambiarPassword(passwordActual: string, passwordNueva: string): Observable<{message: string}> {\n    return this.http.patch<{message: string}>(`${this.apiUrl}/cambiar-password`, {\n      passwordActual,\n      passwordNueva\n    });\n  }\n\n  /**\n   * Renovar token\n   */\n  renovarToken(): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/renovar-token`, {})\n      .pipe(\n        tap(response => {\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.user);\n        })\n      );\n  }\n\n  /**\n   * Cerrar sesi√≥n\n   */\n  logout(): void {\n    // Llamar al endpoint de logout si hay token\n    if (this.getToken()) {\n      this.http.post(`${this.apiUrl}/logout`, {}).subscribe({\n        complete: () => this.limpiarSesion()\n      });\n    } else {\n      this.limpiarSesion();\n    }\n  }\n\n  /**\n   * Verificar si el usuario est√° autenticado\n   */\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n    \n    // Verificar si el token no ha expirado (opcional)\n    try {\n      const payload = this.decodeToken(token);\n      const now = Date.now() / 1000;\n      return payload.exp > now;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Obtener token del localStorage\n   */\n  getToken(): string | null {\n    return localStorage.getItem('auth_token');\n  }\n\n  /**\n   * Obtener usuario actual\n   */\n  getCurrentUser(): Usuario | null {\n    return this.currentUserSubject.value;\n  }\n\n  /**\n   * Guardar token en localStorage\n   */\n  private setToken(token: string): void {\n    localStorage.setItem('auth_token', token);\n  }\n\n  /**\n   * Limpiar sesi√≥n completa\n   */\n  private limpiarSesion(): void {\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n\n  /**\n   * Decodificar token JWT (sin verificaci√≥n)\n   */\n  private decodeToken(token: string): any {\n    try {\n      const payload = token.split('.')[1];\n      return JSON.parse(atob(payload));\n    } catch {\n      return {};\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}