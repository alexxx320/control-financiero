{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransaccionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/transacciones`;\n    this.transaccionesSubject = new BehaviorSubject([]);\n    this.transacciones$ = this.transaccionesSubject.asObservable();\n  }\n  obtenerTransacciones(filtros = {}) {\n    let params = new HttpParams();\n    // Agregar parámetros de filtro\n    Object.keys(filtros).forEach(key => {\n      const value = filtros[key];\n      if (value !== undefined && value !== null && value !== '') {\n        params = params.set(key, value.toString());\n      }\n    });\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(tap(response => this.transaccionesSubject.next(response.transacciones)), catchError(error => {\n      console.error('Error al obtener transacciones:', error);\n      // Devolver datos simulados en caso de error\n      const transaccionesSimuladas = [{\n        _id: '1',\n        fondoId: '1',\n        descripcion: 'Compra de mercado',\n        monto: 150000,\n        tipo: 'gasto',\n        categoria: 'alimentacion',\n        fecha: new Date(),\n        notas: 'Compras del mes'\n      }, {\n        _id: '2',\n        fondoId: '2',\n        descripcion: 'Salario',\n        monto: 2500000,\n        tipo: 'ingreso',\n        categoria: 'salario',\n        fecha: new Date()\n      }];\n      const responseSimulada = {\n        transacciones: transaccionesSimuladas,\n        total: 2,\n        page: 1,\n        totalPages: 1\n      };\n      this.transaccionesSubject.next(transaccionesSimuladas);\n      return [responseSimulada];\n    }));\n  }\n  obtenerTransaccionPorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Error al obtener transacción:', error);\n      throw error;\n    }));\n  }\n  crearTransaccion(transaccion) {\n    return this.http.post(this.apiUrl, transaccion).pipe(tap(nuevaTransaccion => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n    }), catchError(error => {\n      console.error('Error al crear transacción:', error);\n      throw error;\n    }));\n  }\n  actualizarTransaccion(id, transaccion) {\n    return this.http.patch(`${this.apiUrl}/${id}`, transaccion).pipe(tap(transaccionActualizada => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      const index = transaccionesActuales.findIndex(t => t._id === id);\n      if (index !== -1) {\n        transaccionesActuales[index] = transaccionActualizada;\n        this.transaccionesSubject.next([...transaccionesActuales]);\n      }\n    }), catchError(error => {\n      console.error('Error al actualizar transacción:', error);\n      throw error;\n    }));\n  }\n  eliminarTransaccion(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n      this.transaccionesSubject.next(transaccionesFiltradas);\n    }), catchError(error => {\n      console.error('Error al eliminar transacción:', error);\n      throw error;\n    }));\n  }\n  obtenerTransaccionesPorFondo(fondoId, filtros = {}) {\n    let params = new HttpParams();\n    Object.keys(filtros).forEach(key => {\n      const value = filtros[key];\n      if (value !== undefined && value !== null && value !== '') {\n        params = params.set(key, value.toString());\n      }\n    });\n    return this.http.get(`${this.apiUrl}/fondo/${fondoId}`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error al obtener transacciones por fondo:', error);\n      throw error;\n    }));\n  }\n  obtenerEstadisticasPorCategoria(fondoId) {\n    let params = new HttpParams();\n    if (fondoId) {\n      params = params.set('fondoId', fondoId);\n    }\n    return this.http.get(`${this.apiUrl}/estadisticas/categorias`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error al obtener estadísticas por categoría:', error);\n      throw error;\n    }));\n  }\n  obtenerResumenMensual(año, mes, fondoId) {\n    let params = new HttpParams();\n    if (fondoId) {\n      params = params.set('fondoId', fondoId);\n    }\n    return this.http.get(`${this.apiUrl}/resumen/${año}/${mes}`, {\n      params\n    }).pipe(catchError(error => {\n      console.error('Error al obtener resumen mensual:', error);\n      throw error;\n    }));\n  }\n  obtenerCategorias() {\n    return ['alimentacion', 'transporte', 'salud', 'entretenimiento', 'educacion', 'servicios', 'shopping', 'otros', 'salario', 'freelance', 'inversion', 'regalo'];\n  }\n  static {\n    this.ɵfac = function TransaccionService_Factory(t) {\n      return new (t || TransaccionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransaccionService,\n      factory: TransaccionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","tap","catchError","environment","TransaccionService","constructor","http","apiUrl","transaccionesSubject","transacciones$","asObservable","obtenerTransacciones","filtros","params","Object","keys","forEach","key","value","undefined","set","toString","get","pipe","response","next","transacciones","error","console","transaccionesSimuladas","_id","fondoId","descripcion","monto","tipo","categoria","fecha","Date","notas","responseSimulada","total","page","totalPages","obtenerTransaccionPorId","id","crearTransaccion","transaccion","post","nuevaTransaccion","transaccionesActuales","actualizarTransaccion","patch","transaccionActualizada","index","findIndex","t","eliminarTransaccion","delete","transaccionesFiltradas","filter","obtenerTransaccionesPorFondo","obtenerEstadisticasPorCategoria","obtenerResumenMensual","año","mes","obtenerCategorias","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\transaccion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Transaccion, CreateTransaccionDto, UpdateTransaccionDto, TipoTransaccion, CategoriaTransaccion } from '../models/transaccion.model';\n\nexport interface FiltroTransacciones {\n  fondoId?: string;\n  tipo?: TipoTransaccion;\n  categoria?: CategoriaTransaccion;\n  fechaInicio?: string;\n  fechaFin?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface ResponseTransacciones {\n  transacciones: Transaccion[];\n  total: number;\n  page: number;\n  totalPages: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransaccionService {\n  private apiUrl = `${environment.apiUrl}/transacciones`;\n  private transaccionesSubject = new BehaviorSubject<Transaccion[]>([]);\n  public transacciones$ = this.transaccionesSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  obtenerTransacciones(filtros: FiltroTransacciones = {}): Observable<ResponseTransacciones> {\n    let params = new HttpParams();\n    \n    // Agregar parámetros de filtro\n    Object.keys(filtros).forEach(key => {\n      const value = (filtros as any)[key];\n      if (value !== undefined && value !== null && value !== '') {\n        params = params.set(key, value.toString());\n      }\n    });\n\n    return this.http.get<ResponseTransacciones>(this.apiUrl, { params })\n      .pipe(\n        tap(response => this.transaccionesSubject.next(response.transacciones)),\n        catchError(error => {\n          console.error('Error al obtener transacciones:', error);\n          // Devolver datos simulados en caso de error\n          const transaccionesSimuladas: Transaccion[] = [\n            {\n              _id: '1',\n              fondoId: '1',\n              descripcion: 'Compra de mercado',\n              monto: 150000,\n              tipo: 'gasto',\n              categoria: 'alimentacion',\n              fecha: new Date(),\n              notas: 'Compras del mes'\n            },\n            {\n              _id: '2',\n              fondoId: '2',\n              descripcion: 'Salario',\n              monto: 2500000,\n              tipo: 'ingreso',\n              categoria: 'salario',\n              fecha: new Date()\n            }\n          ];\n          const responseSimulada: ResponseTransacciones = {\n            transacciones: transaccionesSimuladas,\n            total: 2,\n            page: 1,\n            totalPages: 1\n          };\n          this.transaccionesSubject.next(transaccionesSimuladas);\n          return [responseSimulada];\n        })\n      );\n  }\n\n  obtenerTransaccionPorId(id: string): Observable<Transaccion> {\n    return this.http.get<Transaccion>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  crearTransaccion(transaccion: CreateTransaccionDto): Observable<Transaccion> {\n    return this.http.post<Transaccion>(this.apiUrl, transaccion)\n      .pipe(\n        tap(nuevaTransaccion => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n        }),\n        catchError(error => {\n          console.error('Error al crear transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  actualizarTransaccion(id: string, transaccion: UpdateTransaccionDto): Observable<Transaccion> {\n    return this.http.patch<Transaccion>(`${this.apiUrl}/${id}`, transaccion)\n      .pipe(\n        tap(transaccionActualizada => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const index = transaccionesActuales.findIndex(t => t._id === id);\n          if (index !== -1) {\n            transaccionesActuales[index] = transaccionActualizada;\n            this.transaccionesSubject.next([...transaccionesActuales]);\n          }\n        }),\n        catchError(error => {\n          console.error('Error al actualizar transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  eliminarTransaccion(id: string): Observable<{message: string}> {\n    return this.http.delete<{message: string}>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap(() => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n          this.transaccionesSubject.next(transaccionesFiltradas);\n        }),\n        catchError(error => {\n          console.error('Error al eliminar transacción:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerTransaccionesPorFondo(fondoId: string, filtros: FiltroTransacciones = {}): Observable<Transaccion[]> {\n    let params = new HttpParams();\n    \n    Object.keys(filtros).forEach(key => {\n      const value = (filtros as any)[key];\n      if (value !== undefined && value !== null && value !== '') {\n        params = params.set(key, value.toString());\n      }\n    });\n\n    return this.http.get<Transaccion[]>(`${this.apiUrl}/fondo/${fondoId}`, { params })\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener transacciones por fondo:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerEstadisticasPorCategoria(fondoId?: string): Observable<any> {\n    let params = new HttpParams();\n    if (fondoId) {\n      params = params.set('fondoId', fondoId);\n    }\n\n    return this.http.get<any>(`${this.apiUrl}/estadisticas/categorias`, { params })\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener estadísticas por categoría:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerResumenMensual(año: number, mes: number, fondoId?: string): Observable<any> {\n    let params = new HttpParams();\n    if (fondoId) {\n      params = params.set('fondoId', fondoId);\n    }\n\n    return this.http.get<any>(`${this.apiUrl}/resumen/${año}/${mes}`, { params })\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener resumen mensual:', error);\n          throw error;\n        })\n      );\n  }\n\n  obtenerCategorias(): CategoriaTransaccion[] {\n    return [\n      'alimentacion',\n      'transporte',\n      'salud',\n      'entretenimiento',\n      'educacion',\n      'servicios',\n      'shopping',\n      'otros',\n      'salario',\n      'freelance',\n      'inversion',\n      'regalo'\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}