{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransaccionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/transacciones`;\n    this.transaccionesSubject = new BehaviorSubject([]);\n    this.transacciones$ = this.transaccionesSubject.asObservable();\n  }\n  obtenerTransacciones(fondoId, tipo, categoria, fechaInicio, fechaFin, page = 1, limit = 10) {\n    let params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    if (fondoId) params = params.set('fondoId', fondoId);\n    if (tipo) params = params.set('tipo', tipo);\n    if (categoria) params = params.set('categoria', categoria);\n    if (fechaInicio) params = params.set('fechaInicio', fechaInicio);\n    if (fechaFin) params = params.set('fechaFin', fechaFin);\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(tap(response => this.transaccionesSubject.next(response.transacciones)));\n  }\n  obtenerTransaccionPorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  crearTransaccion(transaccion) {\n    return this.http.post(this.apiUrl, transaccion).pipe(tap(nuevaTransaccion => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n    }));\n  }\n  actualizarTransaccion(id, transaccion) {\n    return this.http.put(`${this.apiUrl}/${id}`, transaccion).pipe(tap(transaccionActualizada => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      const index = transaccionesActuales.findIndex(t => t._id === id);\n      if (index !== -1) {\n        transaccionesActuales[index] = transaccionActualizada;\n        this.transaccionesSubject.next([...transaccionesActuales]);\n      }\n    }));\n  }\n  eliminarTransaccion(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const transaccionesActuales = this.transaccionesSubject.value;\n      const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n      this.transaccionesSubject.next(transaccionesFiltradas);\n    }));\n  }\n  obtenerResumenPorFondo(fondoId) {\n    return this.http.get(`${this.apiUrl}/resumen/${fondoId}`);\n  }\n  obtenerCategorias() {\n    return ['alimentacion', 'transporte', 'salud', 'entretenimiento', 'educacion', 'servicios', 'shopping', 'otros', 'salario', 'freelance', 'inversion', 'regalo'];\n  }\n  static {\n    this.ɵfac = function TransaccionService_Factory(t) {\n      return new (t || TransaccionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransaccionService,\n      factory: TransaccionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","BehaviorSubject","tap","environment","TransaccionService","constructor","http","apiUrl","transaccionesSubject","transacciones$","asObservable","obtenerTransacciones","fondoId","tipo","categoria","fechaInicio","fechaFin","page","limit","params","set","toString","get","pipe","response","next","transacciones","obtenerTransaccionPorId","id","crearTransaccion","transaccion","post","nuevaTransaccion","transaccionesActuales","value","actualizarTransaccion","put","transaccionActualizada","index","findIndex","t","_id","eliminarTransaccion","delete","transaccionesFiltradas","filter","obtenerResumenPorFondo","obtenerCategorias","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\transaccion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Transaccion, CreateTransaccionDto, UpdateTransaccionDto, TipoTransaccion, CategoriaTransaccion } from '../models/transaccion.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransaccionService {\n  private apiUrl = `${environment.apiUrl}/transacciones`;\n  private transaccionesSubject = new BehaviorSubject<Transaccion[]>([]);\n  public transacciones$ = this.transaccionesSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  obtenerTransacciones(\n    fondoId?: string,\n    tipo?: TipoTransaccion,\n    categoria?: CategoriaTransaccion,\n    fechaInicio?: string,\n    fechaFin?: string,\n    page: number = 1,\n    limit: number = 10\n  ): Observable<{transacciones: Transaccion[], total: number}> {\n    let params = new HttpParams()\n      .set('page', page.toString())\n      .set('limit', limit.toString());\n\n    if (fondoId) params = params.set('fondoId', fondoId);\n    if (tipo) params = params.set('tipo', tipo);\n    if (categoria) params = params.set('categoria', categoria);\n    if (fechaInicio) params = params.set('fechaInicio', fechaInicio);\n    if (fechaFin) params = params.set('fechaFin', fechaFin);\n\n    return this.http.get<{transacciones: Transaccion[], total: number}>(this.apiUrl, { params })\n      .pipe(\n        tap(response => this.transaccionesSubject.next(response.transacciones))\n      );\n  }\n\n  obtenerTransaccionPorId(id: string): Observable<Transaccion> {\n    return this.http.get<Transaccion>(`${this.apiUrl}/${id}`);\n  }\n\n  crearTransaccion(transaccion: CreateTransaccionDto): Observable<Transaccion> {\n    return this.http.post<Transaccion>(this.apiUrl, transaccion)\n      .pipe(\n        tap(nuevaTransaccion => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          this.transaccionesSubject.next([nuevaTransaccion, ...transaccionesActuales]);\n        })\n      );\n  }\n\n  actualizarTransaccion(id: string, transaccion: UpdateTransaccionDto): Observable<Transaccion> {\n    return this.http.put<Transaccion>(`${this.apiUrl}/${id}`, transaccion)\n      .pipe(\n        tap(transaccionActualizada => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const index = transaccionesActuales.findIndex(t => t._id === id);\n          if (index !== -1) {\n            transaccionesActuales[index] = transaccionActualizada;\n            this.transaccionesSubject.next([...transaccionesActuales]);\n          }\n        })\n      );\n  }\n\n  eliminarTransaccion(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap(() => {\n          const transaccionesActuales = this.transaccionesSubject.value;\n          const transaccionesFiltradas = transaccionesActuales.filter(t => t._id !== id);\n          this.transaccionesSubject.next(transaccionesFiltradas);\n        })\n      );\n  }\n\n  obtenerResumenPorFondo(fondoId: string): Observable<{\n    totalIngresos: number;\n    totalGastos: number;\n    balance: number;\n    ultimasTransacciones: Transaccion[];\n  }> {\n    return this.http.get<{\n      totalIngresos: number;\n      totalGastos: number;\n      balance: number;\n      ultimasTransacciones: Transaccion[];\n    }>(`${this.apiUrl}/resumen/${fondoId}`);\n  }\n\n  obtenerCategorias(): CategoriaTransaccion[] {\n    return [\n      'alimentacion',\n      'transporte',\n      'salud',\n      'entretenimiento',\n      'educacion',\n      'servicios',\n      'shopping',\n      'otros',\n      'salario',\n      'freelance',\n      'inversion',\n      'regalo'\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}