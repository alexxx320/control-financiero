{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/notification.service\";\nexport class AuthInterceptor {\n  constructor(authService, router, notificationService) {\n    this.authService = authService;\n    this.router = router;\n    this.notificationService = notificationService;\n  }\n  intercept(req, next) {\n    let authReq = req;\n    console.log('AuthInterceptor - Interceptando request a:', req.url);\n    // Solo agregar el token a las peticiones a nuestra API\n    if (req.url.includes(environment.apiUrl)) {\n      const token = this.authService.getToken();\n      console.log('AuthInterceptor - Token obtenido:', token ? token.substring(0, 20) + '...' : 'NO HAY TOKEN');\n      if (token) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('AuthInterceptor - Header Authorization agregado');\n      } else {\n        console.log('AuthInterceptor - NO se agregó header (sin token)');\n      }\n    } else {\n      console.log('AuthInterceptor - URL externa, no se agrega token');\n    }\n    return next.handle(authReq).pipe(catchError(error => {\n      console.error('AuthInterceptor - Error interceptado:', {\n        status: error.status,\n        url: error.url,\n        message: error.message\n      });\n      // Manejar errores de autenticación\n      if (error.status === 401) {\n        console.log('AuthInterceptor - Error 401, ejecutando handleUnauthorized');\n        this.handleUnauthorized();\n      } else if (error.status === 403) {\n        this.notificationService.error('No tienes permisos para realizar esta acción');\n      } else if (error.status === 0) {\n        // Error de conexión\n        this.notificationService.warning('No se pudo conectar con el servidor.');\n      } else if (error.status >= 500) {\n        this.notificationService.error('Error del servidor. Intenta nuevamente.');\n      }\n      return throwError(() => error);\n    }));\n  }\n  handleUnauthorized() {\n    // Limpiar sesión y redirigir a login\n    this.authService.logout();\n    this.router.navigate(['/login']);\n    this.notificationService.warning('Tu sesión ha expirado. Inicia sesión nuevamente.');\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","environment","AuthInterceptor","constructor","authService","router","notificationService","intercept","req","next","authReq","console","log","url","includes","apiUrl","token","getToken","substring","clone","setHeaders","Authorization","handle","pipe","error","status","message","handleUnauthorized","warning","logout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","i3","NotificationService","factory","ɵfac"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { NotificationService } from '../services/notification.service';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  \n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private notificationService: NotificationService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = req;\n    \n    console.log('AuthInterceptor - Interceptando request a:', req.url);\n    \n    // Solo agregar el token a las peticiones a nuestra API\n    if (req.url.includes(environment.apiUrl)) {\n      const token = this.authService.getToken();\n      \n      console.log('AuthInterceptor - Token obtenido:', token ? token.substring(0, 20) + '...' : 'NO HAY TOKEN');\n      \n      if (token) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('AuthInterceptor - Header Authorization agregado');\n      } else {\n        console.log('AuthInterceptor - NO se agregó header (sin token)');\n      }\n    } else {\n      console.log('AuthInterceptor - URL externa, no se agrega token');\n    }\n    \n    return next.handle(authReq).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.error('AuthInterceptor - Error interceptado:', {\n          status: error.status,\n          url: error.url,\n          message: error.message\n        });\n        \n        // Manejar errores de autenticación\n        if (error.status === 401) {\n          console.log('AuthInterceptor - Error 401, ejecutando handleUnauthorized');\n          this.handleUnauthorized();\n        } else if (error.status === 403) {\n          this.notificationService.error('No tienes permisos para realizar esta acción');\n        } else if (error.status === 0) {\n          // Error de conexión\n          this.notificationService.warning('No se pudo conectar con el servidor.');\n        } else if (error.status >= 500) {\n          this.notificationService.error('Error del servidor. Intenta nuevamente.');\n        }\n        \n        return throwError(() => error);\n      })\n    );\n  }\n\n  private handleUnauthorized(): void {\n    // Limpiar sesión y redirigir a login\n    this.authService.logout();\n    this.router.navigate(['/login']);\n    this.notificationService.warning('Tu sesión ha expirado. Inicia sesión nuevamente.');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}