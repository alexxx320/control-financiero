{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    this.verificarSesionExistente();\n  }\n  /**\n   * Verificar si hay una sesi√≥n activa al inicializar el servicio\n   */\n  verificarSesionExistente() {\n    const token = this.getToken();\n    if (token) {\n      console.log('üîç Verificando token existente:', token.substring(0, 20) + '...');\n      // Verificar si el token es v√°lido obteniendo el perfil\n      this.obtenerPerfil().subscribe({\n        next: user => {\n          console.log('‚úÖ Token v√°lido, usuario autenticado:', user);\n          this.currentUserSubject.next(user);\n          this.isLoggedInSubject.next(true);\n        },\n        error: error => {\n          console.error('‚ùå Token inv√°lido, limpiando sesi√≥n:', error);\n          this.limpiarSesion();\n        }\n      });\n    } else {\n      console.log('üö´ No hay token guardado');\n    }\n  }\n  /**\n   * Iniciar sesi√≥n\n   */\n  login(credentials) {\n    console.log('üîê Intentando login con:', {\n      email: credentials.email\n    });\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      console.log('‚úÖ Login exitoso - respuesta completa:', response);\n      console.log('üé© Token recibido:', response.access_token.substring(0, 20) + '...');\n      console.log('üë§ Usuario recibido:', response.usuario);\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.usuario);\n      this.isLoggedInSubject.next(true);\n      console.log('üíæ Token guardado en localStorage');\n      console.log('üìã Estado actualizado - isLoggedIn: true');\n    }), catchError(error => {\n      console.error('‚ùå Error en login - NO se usar√° fallback:', error);\n      let mensaje = 'Error de autenticaci√≥n';\n      if (error.status === 0) {\n        mensaje = 'No se puede conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.';\n      } else if (error.status === 401) {\n        mensaje = 'Credenciales incorrectas. Verifica tu email y contrase√±a.';\n      } else if (error.status === 500) {\n        mensaje = 'Error interno del servidor. Verifica que MongoDB est√© ejecut√°ndose.';\n      }\n      return throwError(() => ({\n        ...error,\n        message: mensaje\n      }));\n    }));\n  }\n  /**\n   * Registrar nuevo usuario\n   */\n  register(userData) {\n    console.log('üìù Intentando registro con:', {\n      email: userData.email,\n      nombre: userData.nombre\n    });\n    return this.http.post(`${this.apiUrl}/registro`, userData).pipe(tap(response => {\n      console.log('‚úÖ Registro exitoso:', response);\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.usuario);\n      this.isLoggedInSubject.next(true);\n    }), catchError(error => {\n      console.error('‚ùå Error en registro - NO se usar√° fallback:', error);\n      let mensaje = 'Error en el registro';\n      if (error.status === 0) {\n        mensaje = 'No se puede conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.';\n      } else if (error.status === 400) {\n        mensaje = error.error?.message || 'Datos inv√°lidos. Verifica la informaci√≥n ingresada.';\n      } else if (error.status === 500) {\n        mensaje = 'Error interno del servidor. Verifica que MongoDB est√© ejecut√°ndose.';\n      }\n      return throwError(() => ({\n        ...error,\n        message: mensaje\n      }));\n    }));\n  }\n  /**\n   * Obtener perfil del usuario actual\n   */\n  obtenerPerfil() {\n    return this.http.get(`${this.apiUrl}/perfil`).pipe(catchError(error => {\n      console.error('Error al obtener perfil:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Verificar si un email est√° disponible\n   */\n  verificarEmailDisponible(email) {\n    return this.http.post(`${this.apiUrl}/verificar-email`, {\n      email\n    }).pipe(map(response => response.disponible), catchError(() => of(true)) // En caso de error, asumir que est√° disponible\n    );\n  }\n  /**\n   * Cambiar contrase√±a\n   */\n  cambiarPassword(passwordActual, passwordNueva) {\n    return this.http.patch(`${this.apiUrl}/cambiar-password`, {\n      passwordActual,\n      passwordNueva\n    });\n  }\n  /**\n   * Renovar token\n   */\n  renovarToken() {\n    return this.http.post(`${this.apiUrl}/renovar-token`, {}).pipe(tap(response => {\n      this.setToken(response.access_token);\n      this.currentUserSubject.next(response.usuario);\n    }));\n  }\n  /**\n   * Cerrar sesi√≥n\n   */\n  logout() {\n    const token = this.getToken();\n    console.log('üö™ Cerrando sesi√≥n...');\n    if (token) {\n      // Llamar al endpoint de logout\n      this.http.post(`${this.apiUrl}/logout`, {}).subscribe({\n        next: () => {\n          console.log('‚úÖ Logout exitoso en servidor');\n          this.limpiarSesion();\n        },\n        error: error => {\n          console.error('‚ùå Error en logout del servidor:', error);\n          // Limpiar sesi√≥n local aunque falle el logout del servidor\n          this.limpiarSesion();\n        }\n      });\n    } else {\n      this.limpiarSesion();\n    }\n  }\n  /**\n   * Verificar si el usuario est√° autenticado\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) {\n      console.log('üö´ isAuthenticated: No hay token');\n      return false;\n    }\n    // Verificar si el token no ha expirado\n    try {\n      const payload = this.decodeToken(token);\n      const now = Date.now() / 1000;\n      const isValid = payload.exp > now;\n      if (!isValid) {\n        console.log('‚è∞ Token expirado, limpiando sesi√≥n');\n        this.limpiarSesion();\n      } else {\n        console.log('‚úÖ Token v√°lido');\n      }\n      return isValid;\n    } catch (error) {\n      console.error('‚ùå Error decodificando token:', error);\n      this.limpiarSesion();\n      return false;\n    }\n  }\n  /**\n   * Obtener token del localStorage\n   */\n  getToken() {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      console.log('üé© Token obtenido del localStorage:', token.substring(0, 20) + '...');\n    } else {\n      console.log('üö´ No hay token en localStorage');\n    }\n    return token;\n  }\n  /**\n   * Obtener usuario actual\n   */\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  /**\n   * Guardar token en localStorage\n   */\n  setToken(token) {\n    console.log('üíæ Guardando token en localStorage:', token.substring(0, 20) + '...');\n    localStorage.setItem('auth_token', token);\n    console.log('‚úÖ Token guardado exitosamente');\n  }\n  /**\n   * Limpiar sesi√≥n completa\n   */\n  limpiarSesion() {\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n  /**\n   * Decodificar token JWT (sin verificaci√≥n)\n   */\n  decodeToken(token) {\n    try {\n      const payload = token.split('.')[1];\n      return JSON.parse(atob(payload));\n    } catch {\n      return {};\n    }\n  }\n  static {\n    this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","tap","catchError","map","environment","AuthService","constructor","http","router","apiUrl","currentUserSubject","isLoggedInSubject","currentUser$","asObservable","isLoggedIn$","verificarSesionExistente","token","getToken","console","log","substring","obtenerPerfil","subscribe","next","user","error","limpiarSesion","login","credentials","email","post","pipe","response","access_token","usuario","setToken","mensaje","status","message","register","userData","nombre","get","verificarEmailDisponible","disponible","of","cambiarPassword","passwordActual","passwordNueva","patch","renovarToken","logout","isAuthenticated","payload","decodeToken","now","Date","isValid","exp","localStorage","getItem","getCurrentUser","value","setItem","removeItem","split","JSON","parse","atob","i0","…µ…µinject","i1","HttpClient","i2","Router","factory","…µfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../environments/environment';\n\nexport interface Usuario {\n  id: string;\n  nombre: string;\n  apellido?: string;\n  email: string;\n  rol?: string;\n  telefono?: string;\n  avatar?: string;\n  fechaRegistro?: Date;\n  ultimoLogin?: Date;\n}\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterDto {\n  nombre: string;\n  apellido?: string;\n  email: string;\n  password: string;\n  telefono?: string;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  usuario: Usuario; // CORREGIDO: 'usuario' en lugar de 'user'\n  expires_in?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<Usuario | null>(null);\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  \n  public currentUser$ = this.currentUserSubject.asObservable();\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    this.verificarSesionExistente();\n  }\n\n  /**\n   * Verificar si hay una sesi√≥n activa al inicializar el servicio\n   */\n  private verificarSesionExistente(): void {\n    const token = this.getToken();\n    if (token) {\n      console.log('üîç Verificando token existente:', token.substring(0, 20) + '...');\n      \n      // Verificar si el token es v√°lido obteniendo el perfil\n      this.obtenerPerfil().subscribe({\n        next: (user) => {\n          console.log('‚úÖ Token v√°lido, usuario autenticado:', user);\n          this.currentUserSubject.next(user);\n          this.isLoggedInSubject.next(true);\n        },\n        error: (error) => {\n          console.error('‚ùå Token inv√°lido, limpiando sesi√≥n:', error);\n          this.limpiarSesion();\n        }\n      });\n    } else {\n      console.log('üö´ No hay token guardado');\n    }\n  }\n\n  /**\n   * Iniciar sesi√≥n\n   */\n  login(credentials: LoginDto): Observable<AuthResponse> {\n    console.log('üîê Intentando login con:', { email: credentials.email });\n    \n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          console.log('‚úÖ Login exitoso - respuesta completa:', response);\n          console.log('üé© Token recibido:', response.access_token.substring(0, 20) + '...');\n          console.log('üë§ Usuario recibido:', response.usuario);\n          \n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.usuario);\n          this.isLoggedInSubject.next(true);\n          \n          console.log('üíæ Token guardado en localStorage');\n          console.log('üìã Estado actualizado - isLoggedIn: true');\n        }),\n        catchError(error => {\n          console.error('‚ùå Error en login - NO se usar√° fallback:', error);\n          \n          let mensaje = 'Error de autenticaci√≥n';\n          if (error.status === 0) {\n            mensaje = 'No se puede conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.';\n          } else if (error.status === 401) {\n            mensaje = 'Credenciales incorrectas. Verifica tu email y contrase√±a.';\n          } else if (error.status === 500) {\n            mensaje = 'Error interno del servidor. Verifica que MongoDB est√© ejecut√°ndose.';\n          }\n          \n          return throwError(() => ({\n            ...error,\n            message: mensaje\n          }));\n        })\n      );\n  }\n\n  /**\n   * Registrar nuevo usuario\n   */\n  register(userData: RegisterDto): Observable<AuthResponse> {\n    console.log('üìù Intentando registro con:', { email: userData.email, nombre: userData.nombre });\n    \n    return this.http.post<AuthResponse>(`${this.apiUrl}/registro`, userData)\n      .pipe(\n        tap(response => {\n          console.log('‚úÖ Registro exitoso:', response);\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.usuario);\n          this.isLoggedInSubject.next(true);\n        }),\n        catchError(error => {\n          console.error('‚ùå Error en registro - NO se usar√° fallback:', error);\n          \n          let mensaje = 'Error en el registro';\n          if (error.status === 0) {\n            mensaje = 'No se puede conectar con el servidor. Verifica que el backend est√© ejecut√°ndose.';\n          } else if (error.status === 400) {\n            mensaje = error.error?.message || 'Datos inv√°lidos. Verifica la informaci√≥n ingresada.';\n          } else if (error.status === 500) {\n            mensaje = 'Error interno del servidor. Verifica que MongoDB est√© ejecut√°ndose.';\n          }\n          \n          return throwError(() => ({\n            ...error,\n            message: mensaje\n          }));\n        })\n      );\n  }\n\n  /**\n   * Obtener perfil del usuario actual\n   */\n  obtenerPerfil(): Observable<Usuario> {\n    return this.http.get<Usuario>(`${this.apiUrl}/perfil`)\n      .pipe(\n        catchError(error => {\n          console.error('Error al obtener perfil:', error);\n          throw error;\n        })\n      );\n  }\n\n  /**\n   * Verificar si un email est√° disponible\n   */\n  verificarEmailDisponible(email: string): Observable<boolean> {\n    return this.http.post<{disponible: boolean}>(`${this.apiUrl}/verificar-email`, { email })\n      .pipe(\n        map(response => response.disponible),\n        catchError(() => of(true)) // En caso de error, asumir que est√° disponible\n      );\n  }\n\n  /**\n   * Cambiar contrase√±a\n   */\n  cambiarPassword(passwordActual: string, passwordNueva: string): Observable<{message: string}> {\n    return this.http.patch<{message: string}>(`${this.apiUrl}/cambiar-password`, {\n      passwordActual,\n      passwordNueva\n    });\n  }\n\n  /**\n   * Renovar token\n   */\n  renovarToken(): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/renovar-token`, {})\n      .pipe(\n        tap(response => {\n          this.setToken(response.access_token);\n          this.currentUserSubject.next(response.usuario);\n        })\n      );\n  }\n\n  /**\n   * Cerrar sesi√≥n\n   */\n  logout(): void {\n    const token = this.getToken();\n    console.log('üö™ Cerrando sesi√≥n...');\n    \n    if (token) {\n      // Llamar al endpoint de logout\n      this.http.post(`${this.apiUrl}/logout`, {}).subscribe({\n        next: () => {\n          console.log('‚úÖ Logout exitoso en servidor');\n          this.limpiarSesion();\n        },\n        error: (error) => {\n          console.error('‚ùå Error en logout del servidor:', error);\n          // Limpiar sesi√≥n local aunque falle el logout del servidor\n          this.limpiarSesion();\n        }\n      });\n    } else {\n      this.limpiarSesion();\n    }\n  }\n\n  /**\n   * Verificar si el usuario est√° autenticado\n   */\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) {\n      console.log('üö´ isAuthenticated: No hay token');\n      return false;\n    }\n    \n    // Verificar si el token no ha expirado\n    try {\n      const payload = this.decodeToken(token);\n      const now = Date.now() / 1000;\n      const isValid = payload.exp > now;\n      \n      if (!isValid) {\n        console.log('‚è∞ Token expirado, limpiando sesi√≥n');\n        this.limpiarSesion();\n      } else {\n        console.log('‚úÖ Token v√°lido');\n      }\n      \n      return isValid;\n    } catch (error) {\n      console.error('‚ùå Error decodificando token:', error);\n      this.limpiarSesion();\n      return false;\n    }\n  }\n\n  /**\n   * Obtener token del localStorage\n   */\n  getToken(): string | null {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      console.log('üé© Token obtenido del localStorage:', token.substring(0, 20) + '...');\n    } else {\n      console.log('üö´ No hay token en localStorage');\n    }\n    return token;\n  }\n\n  /**\n   * Obtener usuario actual\n   */\n  getCurrentUser(): Usuario | null {\n    return this.currentUserSubject.value;\n  }\n\n  /**\n   * Guardar token en localStorage\n   */\n  private setToken(token: string): void {\n    console.log('üíæ Guardando token en localStorage:', token.substring(0, 20) + '...');\n    localStorage.setItem('auth_token', token);\n    console.log('‚úÖ Token guardado exitosamente');\n  }\n\n  /**\n   * Limpiar sesi√≥n completa\n   */\n  private limpiarSesion(): void {\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n  }\n\n  /**\n   * Decodificar token JWT (sin verificaci√≥n)\n   */\n  private decodeToken(token: string): any {\n    try {\n      const payload = token.split('.')[1];\n      return JSON.parse(atob(payload));\n    } catch {\n      return {};\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}