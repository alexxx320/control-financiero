{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FondoService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/fondos`;\n    this.fondosSubject = new BehaviorSubject([]);\n    this.fondos$ = this.fondosSubject.asObservable();\n  }\n  obtenerFondos(activo) {\n    const url = activo !== undefined ? `${this.apiUrl}?activo=${activo}` : this.apiUrl;\n    return this.http.get(url).pipe(tap(fondos => this.fondosSubject.next(fondos)));\n  }\n  obtenerFondoPorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  crearFondo(fondo) {\n    return this.http.post(this.apiUrl, fondo).pipe(tap(nuevoFondo => {\n      const fondosActuales = this.fondosSubject.value;\n      this.fondosSubject.next([...fondosActuales, nuevoFondo]);\n    }));\n  }\n  actualizarFondo(id, fondo) {\n    return this.http.put(`${this.apiUrl}/${id}`, fondo).pipe(tap(fondoActualizado => {\n      const fondosActuales = this.fondosSubject.value;\n      const index = fondosActuales.findIndex(f => f._id === id);\n      if (index !== -1) {\n        fondosActuales[index] = fondoActualizado;\n        this.fondosSubject.next([...fondosActuales]);\n      }\n    }));\n  }\n  eliminarFondo(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const fondosActuales = this.fondosSubject.value;\n      const fondosFiltrados = fondosActuales.filter(f => f._id !== id);\n      this.fondosSubject.next(fondosFiltrados);\n    }));\n  }\n  obtenerEstadisticasFondo(id) {\n    return this.http.get(`${this.apiUrl}/${id}/estadisticas`);\n  }\n  obtenerTiposFondo() {\n    return ['ahorro', 'inversion', 'emergencia', 'gastos', 'personal'];\n  }\n  static {\n    this.ɵfac = function FondoService_Factory(t) {\n      return new (t || FondoService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FondoService,\n      factory: FondoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","FondoService","constructor","http","apiUrl","fondosSubject","fondos$","asObservable","obtenerFondos","activo","url","undefined","get","pipe","fondos","next","obtenerFondoPorId","id","crearFondo","fondo","post","nuevoFondo","fondosActuales","value","actualizarFondo","put","fondoActualizado","index","findIndex","f","_id","eliminarFondo","delete","fondosFiltrados","filter","obtenerEstadisticasFondo","obtenerTiposFondo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\alext\\ControlFinanciero\\frontend\\src\\app\\core\\services\\fondo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Fondo, CreateFondoDto, UpdateFondoDto, TipoFondo } from '../models/fondo.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FondoService {\n  private apiUrl = `${environment.apiUrl}/fondos`;\n  private fondosSubject = new BehaviorSubject<Fondo[]>([]);\n  public fondos$ = this.fondosSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  obtenerFondos(activo?: boolean): Observable<Fondo[]> {\n    const url = activo !== undefined ? `${this.apiUrl}?activo=${activo}` : this.apiUrl;\n    return this.http.get<Fondo[]>(url)\n      .pipe(\n        tap(fondos => this.fondosSubject.next(fondos))\n      );\n  }\n\n  obtenerFondoPorId(id: string): Observable<Fondo> {\n    return this.http.get<Fondo>(`${this.apiUrl}/${id}`);\n  }\n\n  crearFondo(fondo: CreateFondoDto): Observable<Fondo> {\n    return this.http.post<Fondo>(this.apiUrl, fondo)\n      .pipe(\n        tap(nuevoFondo => {\n          const fondosActuales = this.fondosSubject.value;\n          this.fondosSubject.next([...fondosActuales, nuevoFondo]);\n        })\n      );\n  }\n\n  actualizarFondo(id: string, fondo: UpdateFondoDto): Observable<Fondo> {\n    return this.http.put<Fondo>(`${this.apiUrl}/${id}`, fondo)\n      .pipe(\n        tap(fondoActualizado => {\n          const fondosActuales = this.fondosSubject.value;\n          const index = fondosActuales.findIndex(f => f._id === id);\n          if (index !== -1) {\n            fondosActuales[index] = fondoActualizado;\n            this.fondosSubject.next([...fondosActuales]);\n          }\n        })\n      );\n  }\n\n  eliminarFondo(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`)\n      .pipe(\n        tap(() => {\n          const fondosActuales = this.fondosSubject.value;\n          const fondosFiltrados = fondosActuales.filter(f => f._id !== id);\n          this.fondosSubject.next(fondosFiltrados);\n        })\n      );\n  }\n\n  obtenerEstadisticasFondo(id: string): Observable<{\n    totalTransacciones: number;\n    totalIngresos: number;\n    totalGastos: number;\n    balance: number;\n    progresoMeta: number;\n    transaccionesRecientes: any[];\n  }> {\n    return this.http.get<{\n      totalTransacciones: number;\n      totalIngresos: number;\n      totalGastos: number;\n      balance: number;\n      progresoMeta: number;\n      transaccionesRecientes: any[];\n    }>(`${this.apiUrl}/${id}/estadisticas`);\n  }\n\n  obtenerTiposFondo(): TipoFondo[] {\n    return ['ahorro', 'inversion', 'emergencia', 'gastos', 'personal'];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}